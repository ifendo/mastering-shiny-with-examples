[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"book used extract capture executable code examples Mastering Shiny book personal practice testing.","code":""},{"path":"index.html","id":"mastering-shiny-by-hadley-wickham","chapter":"About","heading":"Mastering-Shiny by Hadley Wickham","text":"Mastering-Shiny","code":""},{"path":"your-first-shiny-app.html","id":"your-first-shiny-app","chapter":"1 Your first Shiny app","heading":"1 Your first Shiny app","text":"","code":""},{"path":"your-first-shiny-app.html","id":"single-file-app","chapter":"1 Your first Shiny app","heading":"1.1 Single file app","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  h1(\"Hello World!\")\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"adding-ui-controls","chapter":"1 Your first Shiny app","heading":"1.2 Adding UI controls","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"dataset\", label = \"Dataset\", choices = ls(\"package:datasets\")),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"table\")\n)\n\nserver <- function(input, output, session) {\n  output$summary <- renderPrint({\n    dataset <- get(input$dataset, \"package:datasets\")\n    summary(dataset)\n  })\n  \n  output$table <- renderTable({\n    dataset <- get(input$dataset, \"package:datasets\")\n    dataset\n  })\n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"reactive-expression","chapter":"1 Your first Shiny app","heading":"1.3 Reactive expression","text":"create reactive expression wrapping block code reactive({…}) assigning variable, use reactive expression calling like function.looks like ’re calling function, reactive expression important difference: runs first time called caches result needs updated.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"dataset\", label = \"Dataset\", choices = ls(\"package:datasets\")),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"table\")\n)\n\nserver <- function(input, output, session) {\n  # Create a reactive expression\n  dataset <- reactive({\n    get(input$dataset, \"package:datasets\")\n  })\n\n  output$summary <- renderPrint({\n    # Use a reactive expression by calling it like a function\n    summary(dataset())\n  })\n  \n  output$table <- renderTable({\n    dataset()\n  })\n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"exercises","chapter":"1 Your first Shiny app","heading":"1.4 Exercises","text":"","code":""},{"path":"your-first-shiny-app.html","id":"exercise-1","chapter":"1 Your first Shiny app","heading":"1.4.1 Exercise 1","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n  output$greeting <- renderText({\n  paste0(\"Hello \", input$name)\n})\n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"exercise-2","chapter":"1 Your first Shiny app","heading":"1.4.2 Exercise 2","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", label = \"If x is\", min = 1, max = 50, value = 30),\n  \"then x times 5 is\",\n  textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    input$x * 5\n  })\n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"exercise-3","chapter":"1 Your first Shiny app","heading":"1.4.3 Exercise 3","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", label = \"If x is\", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", label = \"and y is\", min = 1, max = 50, value = 5),\n  \"then, x times y is\",\n  textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    input$x * input$y\n  })\n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"exercise-4","chapter":"1 Your first Shiny app","heading":"1.4.4 Exercise 4","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", \"If x is\", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", \"and y is\", min = 1, max = 50, value = 5),\n  \"then, (x * y) is\", textOutput(\"product\"),\n  \"and, (x * y) + 5 is\", textOutput(\"product_plus5\"),\n  \"and (x * y) + 10 is\", textOutput(\"product_plus10\")\n)\n\nserver <- function(input, output, session) {\n\n  product <- reactive({\n    input$x * input$y\n  })\n  output$product <- renderText({ \n    product()\n  })\n  output$product_plus5 <- renderText({ \n    product() + 5\n  })\n  output$product_plus10 <- renderText({ \n    product() + 10\n  })\n}\n\nshinyApp(ui, server)"},{"path":"your-first-shiny-app.html","id":"exercise-5","chapter":"1 Your first Shiny app","heading":"1.4.5 Exercise 5","text":"","code":"\nlibrary(shiny)\nlibrary(ggplot2)\n\ndatasets <- c(\"economics\", \"faithfuld\", \"seals\")\nui <- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summary <- renderPrint({\n    summary(dataset())\n  })\n  output$plot <- renderPlot({\n    plot(dataset())\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"basic-ui","chapter":"2 Basic UI","heading":"2 Basic UI","text":"","code":""},{"path":"basic-ui.html","id":"shiny-extensions","chapter":"2 Basic UI","heading":"2.1 Shiny extensions","text":"shinyWidgetscolorpickersorttablehttps://github.com/nanxstats/awesome-shiny-extensions","code":""},{"path":"basic-ui.html","id":"inputs","chapter":"2 Basic UI","heading":"2.2 Inputs","text":"","code":""},{"path":"basic-ui.html","id":"common-structure","chapter":"2 Basic UI","heading":"2.2.1 Common structure","text":"input functions first argument: inputId.inputId two constraints:must simple string contains letters, numbers, underscores (spaces, dashes, periods, special characters allowed!). Name like name variable R.must simple string contains letters, numbers, underscores (spaces, dashes, periods, special characters allowed!). Name like name variable R.must unique. ’s unique, ’ll way refer control server function!must unique. ’s unique, ’ll way refer control server function!","code":""},{"path":"basic-ui.html","id":"input-examples","chapter":"2 Basic UI","heading":"2.2.2 Input examples","text":"","code":"\nlibrary(shiny)\n\nanimals <- c(\"dog\", \"cat\", \"mouse\", \"bird\", \"other\", \"I hate animals\")\n\nui <- fluidPage(\n  # free text\n  textInput(\"name\", \"What's your name?\"),\n  passwordInput(\"password\", \"What's your password?\"),\n  textAreaInput(\"story\", \"Tell me about yourself\", rows = 3),\n\n  # numeric inputs\n  numericInput(\"num\", \"Number one\", value = 0, min = 0, max = 100),\n  sliderInput(\"num2\", \"Number two\", value = 50, min = 0, max = 100),\n  sliderInput(\"rng\", \"Range\", value = c(10, 20), min = 0, max = 100),\n\n  # date inputs\n  dateInput(\"dob\", \"When were you born?\"),\n  dateRangeInput(\"holiday\", \"When do you want to go on vacation next?\"),\n\n  # limited choices\n  selectInput(\"state\", \"What's your favourite state?\", state.name),\n  radioButtons(\"animal\", \"What's your favourite animal?\", animals),\n  # we can even use Icon\n  radioButtons(\"rb\", \"Choose one:\",\n    choiceNames = list(\n      icon(\"angry\"),\n      icon(\"smile\"),\n      icon(\"sad-tear\")\n    ),\n    choiceValues = list(\"angry\", \"happy\", \"sad\")\n  ),\n\n  # select input\n  selectInput(\n    \"state\", \"What's your favourite state?\", state.name,\n    multiple = TRUE\n  ),\n\n  # file upload\n  fileInput(\"upload\", NULL),\n\n  # action button\n  actionButton(\"click\", \"Click me!\", class = \"btn-danger\"),\n  actionButton(\"drink\", \"Drink me!\", icon = icon(\"cocktail\"), class = \"btn-lg btn-success\")\n\n\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"exercises-1","chapter":"2 Basic UI","heading":"2.2.3 Exercises","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  # ex 1\n  textInput('t1', label = NULL, placeholder = 'Your name'),\n\n  # ex 2\n  sliderInput(\n    's1', \n    label = 'When should we deliver?', \n    min = as.Date('2020-09-16'), \n    max = as.Date('2020-09-23'), \n    value = as.Date('2020-09-17')\n  ),\n\n  # ex 3\n  sliderInput(\n    's2',\n    'Ex 3',\n    min = 0,\n    max = 100,\n    value = 50,\n    step = 5,\n    animate = TRUE\n  ),\n\n  # ex 4\n  selectInput(\n    'se1',\n    'Select an option',\n    choices = list(\n      group1 = list('Option 1', 'Option 2'),\n      group2 = list('Option 3', 'Option 4', 'Option 5')\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"outputs","chapter":"2 Basic UI","heading":"2.3 Outputs","text":"Outputs UI create placeholders later filled server function.","code":""},{"path":"basic-ui.html","id":"text-output","chapter":"2 Basic UI","heading":"2.3.1 Text output","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textOutput(\"text\"),\n  verbatimTextOutput(\"code\")\n)\nserver <- function(input, output, session) {\n  output$text <- renderText({ \n    \"Hello friend!\" \n  })\n  output$code <- renderPrint({ \n    summary(1:10) \n  })\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"table-output","chapter":"2 Basic UI","heading":"2.3.2 Table output","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  tableOutput(\"static\"),\n  dataTableOutput(\"dynamic\")\n)\nserver <- function(input, output, session) {\n  output$static <- renderTable(head(mtcars))\n  output$dynamic <- renderDataTable(mtcars, options = list(pageLength = 5))\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"plot-output","chapter":"2 Basic UI","heading":"2.3.3 Plot output","text":"Plots special outputs can also act inputs.plotOutput() number arguments like click, dblclick, hover. pass string, like click = “plot_click”, ’ll create reactive input (input$plot_click) can use handle user interaction plot.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  plotOutput(\"plot\", width = \"400px\")\n)\nserver <- function(input, output, session) {\n  output$plot <- renderPlot(plot(1:5), res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"exercises-2","chapter":"2 Basic UI","heading":"2.3.4 Exercises","text":"","code":""},{"path":"basic-ui.html","id":"ex-1","chapter":"2 Basic UI","heading":"2.3.4.1 Ex 1","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textOutput('t1'),\n  verbatimTextOutput('v1'),\n  verbatimTextOutput('v2'),\n  verbatimTextOutput('v3')\n)\n\nserver <- function(input, output, session) {\n  output$t1 <- renderText(\"Good morning!\")\n  output$v1 <- renderPrint(str(lm(mpg ~ wt, data = mtcars)))\n  output$v2 <- renderPrint(summary(mtcars))\n  output$v3 <- renderPrint(t.test(1:5, 2:6))\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"ex-2","chapter":"2 Basic UI","heading":"2.3.4.2 Ex 2","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  plotOutput(\"plot\", width = \"400px\")\n)\nserver <- function(input, output, session) {\n  output$plot <- renderPlot(plot(1:5), \n    width = 700, \n    height = 300, \n    res = 96, \n    alt = 'a scatterplot of five random numbers')\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"ex-3","chapter":"2 Basic UI","heading":"2.3.4.3 Ex 3","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  dataTableOutput(\"table\")\n)\n\nserver <- function(input, output, session) {\n  output$table <- renderDataTable(mtcars, options = list(dom='t'))\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"ex-4","chapter":"2 Basic UI","heading":"2.3.4.4 Ex 4","text":"","code":"\nlibrary(shiny)\nlibrary(reactable)\n\nui <- fluidPage(\n  reactableOutput(\"table\")\n)\n\nserver <- function(input, output) {\n  output$table <- renderReactable({\n    reactable(mtcars)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"basic-reactivity","chapter":"3 Basic reactivity","heading":"3 Basic reactivity","text":"key idea reactive programming specify graph dependencies input changes, related outputs automatically updated.","code":""},{"path":"basic-reactivity.html","id":"server-function","chapter":"3 Basic reactivity","heading":"3.1 Server function","text":"ui simple every user gets HTML. server complicated every user needs get independent version app; user moves slider, user B shouldn’t see outputs change.achieve independence, Shiny invokes server() function time new session starts.","code":""},{"path":"basic-reactivity.html","id":"input","chapter":"3 Basic reactivity","heading":"3.1.1 Input","text":"input selective allowed read . read input, must reactive context created function like renderText() reactive()","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"count\", label = \"Number of values\", value = 100)\n)\n\nserver <- function(input, output, session) {\n  # input objects are read-only\n  input$count <- 10  \n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"output","chapter":"3 Basic reactivity","heading":"3.1.2 Output","text":"always use output object concert render function.render function two things:sets special reactive context automatically tracks inputs output uses.sets special reactive context automatically tracks inputs output uses.converts output R code HTML suitable display web page.converts output R code HTML suitable display web page.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n  output$greeting <- renderText(\"Hello human!\")\n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"reactive-programming","chapter":"3 Basic reactivity","heading":"3.2 Reactive programming","text":"","code":""},{"path":"basic-reactivity.html","id":"reactive-programming-exercises","chapter":"3 Basic reactivity","heading":"3.2.1 Reactive programming exercises","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\n# server1\n# server <- function(input, output, server) {\n#   output$greeting <- renderText(paste0(\"Hello \", input$name))\n# }\n\n# server2\n# server <- function(input, output, server) {\n#   greeting <- reactive(paste0(\"Hello \", input$name))\n#   output$greeting <- renderText(greeting())\n# }\n\n# server3\nserver <- function(input, output, server) {\n  output$greeting <- renderText(paste0(\"Hello \", input$name))\n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"reactive-expressions","chapter":"3 Basic reactivity","heading":"3.3 Reactive Expressions","text":"","code":"\nlibrary(ggplot2)\n\nfreqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {\n  df <- data.frame(\n    x = c(x1, x2),\n    g = c(rep(\"x1\", length(x1)), rep(\"x2\", length(x2)))\n  )\n\n  ggplot(df, aes(x, colour = g)) +\n    geom_freqpoly(binwidth = binwidth, size = 1) +\n    coord_cartesian(xlim = xlim)\n}\n\nt_test <- function(x1, x2) {\n  test <- t.test(x1, x2)\n  \n  # use sprintf() to format t.test() results compactly\n  sprintf(\n    \"p value: %0.3f\\n[%0.2f, %0.2f]\",\n    test$p.value, test$conf.int[1], test$conf.int[2]\n  )\n}\n\n# compare two simulated datasets with a plot and a hypothesis test\nset.seed(100)\nx1 <- rnorm(100, mean = 0, sd = 0.5)\nx2 <- rnorm(200, mean = 0.15, sd = 0.9)\n\nfreqpoly(x1, x2)\nt_test(x1, x2)\nlibrary(shiny)\n\nui <- fluidPage(\n  fluidRow(\n    column(4, \n      \"Distribution 1\",\n      numericInput(\"n1\", label = \"n\", value = 1000, min = 1),\n      numericInput(\"mean1\", label = \"µ\", value = 0, step = 0.1),\n      numericInput(\"sd1\", label = \"σ\", value = 0.5, min = 0.1, step = 0.1)\n    ),\n    column(4, \n      \"Distribution 2\",\n      numericInput(\"n2\", label = \"n\", value = 1000, min = 1),\n      numericInput(\"mean2\", label = \"µ\", value = 0, step = 0.1),\n      numericInput(\"sd2\", label = \"σ\", value = 0.5, min = 0.1, step = 0.1)\n    ),\n    column(4,\n      \"Frequency polygon\",\n      numericInput(\"binwidth\", label = \"Bin width\", value = 0.1, step = 0.1),\n      sliderInput(\"range\", label = \"range\", value = c(-3, 3), min = -5, max = 5)\n    )\n  ),\n  fluidRow(\n    column(9, plotOutput(\"hist\")),\n    column(3, verbatimTextOutput(\"ttest\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  x1 <- reactive(rnorm(input$n1, input$mean1, input$sd1))\n  x2 <- reactive(rnorm(input$n2, input$mean2, input$sd2))\n\n  output$hist <- renderPlot({\n    freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)\n  }, res = 96)\n\n  output$ttest <- renderText({\n    t_test(x1(), x2())\n  })\n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"controlling-timeing-of-evaluation","chapter":"3 Basic reactivity","heading":"3.4 Controlling timeing of evaluation","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  fluidRow(\n    column(3, \n      numericInput(\"lambda1\", label = \"lambda1\", value = 3),\n      numericInput(\"lambda2\", label = \"lambda2\", value = 5),\n      numericInput(\"n\", label = \"n\", value = 1e4, min = 0)\n    ),\n    column(9, plotOutput(\"hist\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  timer <- reactiveTimer(500) # the plot will update twice a second\n  \n  x1 <- reactive({\n    timer()\n    rpois(input$n, input$lambda1)\n  })\n  \n  x2 <- reactive({\n    timer()\n    rpois(input$n, input$lambda2)\n  })\n  \n  output$hist <- renderPlot({\n    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"eventreactive","chapter":"3 Basic reactivity","heading":"3.4.1 eventReactive","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  fluidRow(\n    column(3, \n      numericInput(\"lambda1\", label = \"lambda1\", value = 3),\n      numericInput(\"lambda2\", label = \"lambda2\", value = 5),\n      numericInput(\"n\", label = \"n\", value = 1e4, min = 0),\n      actionButton(\"simulate\", \"Simulate!\")\n    ),\n    column(9, plotOutput(\"hist\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  x1 <- eventReactive(input$simulate, {\n    rpois(input$n, input$lambda1)\n  })\n  x2 <- eventReactive(input$simulate, {\n    rpois(input$n, input$lambda2)\n  })\n\n  output$hist <- renderPlot({\n    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"basic-reactivity.html","id":"observers","chapter":"3 Basic reactivity","heading":"3.5 Observers","text":"Sometimes need reach outside app cause side-effects happen elsewhere world. might saving file shared network drive, sending data web API, updating database, (commonly) printing debugging message console. actions don’t affect app looks, shouldn’t use output render function. Instead need use observer.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n  string <- reactive(paste0(\"Hello \", input$name, \"!\"))\n  \n  output$greeting <- renderText(string())\n  observeEvent(input$name, {\n    message(\"Greeting performed\")\n  })\n}\n\nshinyApp(ui, server)"},{"path":"case-study-er-injuries.html","id":"case-study-er-injuries","chapter":"4 Case study: ER injuries","heading":"4 Case study: ER injuries","text":"","code":""},{"path":"workflow.html","id":"workflow","chapter":"5 Workflow","heading":"5 Workflow","text":"Improving workflow good place invest time tends pay great dividends long run.","code":""},{"path":"workflow.html","id":"case-study","chapter":"5 Workflow","heading":"5.1 Case Study","text":"","code":""},{"path":"workflow.html","id":"app-showing-missing-values","chapter":"5 Workflow","heading":"5.1.1 app showing missing values","text":"","code":"\nlibrary(readr)\nlibrary(shiny)\n\nsales <- readr::read_csv(\"assets/sales_data_sample.csv\")\nsales <- sales[c(\n  \"TERRITORY\", \"ORDERDATE\", \"ORDERNUMBER\", \"PRODUCTCODE\",\n  \"QUANTITYORDERED\", \"PRICEEACH\"\n)]\n\nui <- fluidPage(\n  selectInput(\"territory\", \"territory\", choices = unique(sales$TERRITORY)),\n  tableOutput(\"selected\")\n)\nserver <- function(input, output, session) {\n  selected <- reactive(sales[sales$TERRITORY == input$territory, ])\n  output$selected <- renderTable(head(selected(), 10))\n}\n\nshinyApp(ui, server)"},{"path":"workflow.html","id":"app-after-debugging","chapter":"5 Workflow","heading":"5.1.2 app after debugging","text":"Shiny silently converted NA “NA”. GitHub issue","code":"\nlibrary(readr)\nlibrary(shiny)\n\nsales <- readr::read_csv(\"assets/sales_data_sample.csv\")\nsales <- sales[c(\n  \"TERRITORY\", \"ORDERDATE\", \"ORDERNUMBER\", \"PRODUCTCODE\",\n  \"QUANTITYORDERED\", \"PRICEEACH\"\n)]\n\nui <- fluidPage(\n  selectInput(\"territory\", \"territory\", choices = unique(sales$TERRITORY)),\n  tableOutput(\"selected\")\n)\n\nserver <- function(input, output, session) {\n  selected <- reactive({\n    if (input$territory == \"NA\") {\n      subset(sales, is.na(TERRITORY))\n    } else {\n      subset(sales, TERRITORY == input$territory)\n    }\n  })\n  output$selected <- renderTable(head(selected(), 10))\n}\n\nshinyApp(ui, server)"},{"path":"workflow.html","id":"using-glue-for-debugging","chapter":"5 Workflow","heading":"5.1.3 using glue for debugging","text":"","code":"\nlibrary(shiny)\nlibrary(glue)\n\nui <- fluidPage(\n  sliderInput(\"x\", \"x\", value = 1, min = 0, max = 10),\n  sliderInput(\"y\", \"y\", value = 2, min = 0, max = 10),\n  sliderInput(\"z\", \"z\", value = 3, min = 0, max = 10),\n  textOutput(\"total\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$x, {\n    message(glue(\"Updating y from {input$y} to {input$x * 2}\"))\n    updateSliderInput(session, \"y\", value = input$x * 2)\n  })\n  \n  total <- reactive({\n    total <- input$x + input$y + input$z\n    message(glue(\"New total is {total}\"))\n    total\n  })\n  \n  output$total <- renderText({\n    total()\n  })\n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"layout-themes-html","chapter":"6 Layout, themes, HTML","heading":"6 Layout, themes, HTML","text":"","code":""},{"path":"layout-themes-html.html","id":"single-page-layouts","chapter":"6 Layout, themes, HTML","heading":"6.1 Single page layouts","text":"","code":""},{"path":"layout-themes-html.html","id":"exercises-3","chapter":"6 Layout, themes, HTML","heading":"6.1.1 Exercises","text":"","code":""},{"path":"layout-themes-html.html","id":"ex-1-1","chapter":"6 Layout, themes, HTML","heading":"6.1.1.1 Ex 1","text":"using sidebarLayoutusing fluidRow","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(textInput('t1','Please enter your name:')),\n    mainPanel(textOutput('to1'))\n  )\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  fluidRow(\n    column(4, textInput('t1', 'Please enter your name:')),\n    column(8, textOutput('to1'))\n  )\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"ex-2-1","chapter":"6 Layout, themes, HTML","heading":"6.1.1.2 Ex 2","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples:\", 2, min = 1, max = 100)\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    ),\n    position = 'right'\n  )\n)\nserver <- function(input, output, session) {\n  output$hist <- renderPlot({\n    means <- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"ex-3-1","chapter":"6 Layout, themes, HTML","heading":"6.1.1.3 Ex 3","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  fluidRow(\n    column(6, plotOutput('p1')),\n    column(6, plotOutput('p2'))\n  ),\n  fluidRow(\n    textInput('t1', 'Please enter the title:', width = '100%')\n  )\n)\nserver <- function(input, output, session) {\n  output$p1 <- renderPlot({\n    plot(cars)\n  })\n\n  output$p2 <- renderPlot({\n    plot(mtcars)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"multi-page-layouts","chapter":"6 Layout, themes, HTML","heading":"6.2 Multi-page layouts","text":"","code":""},{"path":"layout-themes-html.html","id":"tabsetpanel","chapter":"6 Layout, themes, HTML","heading":"6.2.1 tabsetPanel","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      textOutput(\"panel\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        id = \"tabset\",\n        tabPanel(\"panel 1\", \"one\"),\n        tabPanel(\"panel 2\", \"two\"),\n        tabPanel(\"panel 3\", \"three\")\n      )\n    )\n  )\n)\nserver <- function(input, output, session) {\n  output$panel <- renderText({\n    paste(\"Current panel: \", input$tabset)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"navlistpanel","chapter":"6 Layout, themes, HTML","heading":"6.2.2 navlistPanel","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  navlistPanel(\n    id = \"tabset\",\n    \"test Heading 1\",\n    tabPanel(\"panel 1\", \"Panel one contents\"),\n    \"test Heading 2\",\n    tabPanel(\"panel 2\", \"Panel two contents\"),\n    tabPanel(\"panel 3\", \"Panel three contents\")\n  ),\n  textOutput('t1')\n)\n\nserver <- function(input, output, session) {\n  output$t1 <- renderText({\n    paste(\"Current panel: \", input$tabset)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"navbarpage","chapter":"6 Layout, themes, HTML","heading":"6.2.3 navbarPage","text":"","code":"\nlibrary(shiny)\n\nui <- navbarPage(\n  \"Page title\",  \n  id = 'nav1',\n  tabPanel(\"panel 1\", \"one\"),\n  tabPanel(\"panel 2\", \"two\"),\n  tabPanel(\"panel 3\", \"three\"),\n  navbarMenu(\"subpanels\", \n    tabPanel(\"panel 4a\", \"four-a\"),\n    tabPanel(\"panel 4b\", \"four-b\"),\n    tabPanel(\"panel 4c\", \"four-c\")\n  ),\n  textOutput('t1')\n)\n\nserver <- function(input, output, session) {\n  output$t1 <- renderText({\n    paste(\"Current panel: \", input$nav1)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"layout-themes-html.html","id":"bootstrap","chapter":"6 Layout, themes, HTML","heading":"6.3 Bootstrap","text":"referenceAwesome Shiny","code":""},{"path":"layout-themes-html.html","id":"themes","chapter":"6 Layout, themes, HTML","heading":"6.4 Themes","text":"","code":"\nlibrary(shiny)\nlibrary(bslib)\n\nui <- fluidPage(\n  theme = bslib::bs_theme(bootswatch = \"darkly\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"txt\", \"Text input:\", \"text here\"),\n      sliderInput(\"slider\", \"Slider input:\", 1, 100, 30)\n    ),\n    mainPanel(\n      h1(paste0(\"Theme: darkly\")),\n      h2(\"Header 2\"),\n      p(\"Some text\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"graphics","chapter":"7 Graphics","heading":"7 Graphics","text":"","code":""},{"path":"graphics.html","id":"plotoutput-click-event","chapter":"7 Graphics","heading":"7.1 plotOutput click event","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  plotOutput(\"plot\", click = \"plot_click\"),\n  verbatimTextOutput(\"info\")\n)\n\nserver <- function(input, output) {\n  output$plot <- renderPlot({\n    plot(mtcars$wt, mtcars$mpg)\n  }, res = 96)\n\n  output$info <- renderPrint({\n    req(input$plot_click)\n    x <- round(input$plot_click$x, 2)\n    y <- round(input$plot_click$y, 2)\n    cat(\"[\", x, \", \", y, \"]\", sep = \"\")\n  })\n}\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"plotoutput-click-nearpoints","chapter":"7 Graphics","heading":"7.2 plotOutput click nearPoints","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  plotOutput(\"plot\", click = \"plot_click\"),\n  tableOutput(\"data\")\n)\nserver <- function(input, output, session) {\n  output$plot <- renderPlot({\n    plot(mtcars$wt, mtcars$mpg)\n  }, res = 96)\n  \n  output$data <- renderTable({\n    nearPoints(mtcars, input$plot_click, xvar = \"wt\", yvar = \"mpg\")\n  })\n}\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"plotoutput-brush-brushedpoints","chapter":"7 Graphics","heading":"7.3 plotOutput brush brushedPoints","text":"","code":"\nlibrary(shiny)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  plotOutput(\"plot\", brush = \"plot_brush\"),\n  tableOutput(\"data\")\n)\nserver <- function(input, output, session) {\n  output$plot <- renderPlot({\n    ggplot(mtcars, aes(wt, mpg)) + geom_point()\n  }, res = 96)\n  \n  output$data <- renderTable({\n    brushedPoints(mtcars, input$plot_brush)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"modifying-the-plot","chapter":"7 Graphics","heading":"7.4 Modifying the plot","text":"","code":"\nlibrary(shiny)\nlibrary(ggplot2)\n\nset.seed(1014)\ndf <- data.frame(x = rnorm(100), y = rnorm(100))\n\nui <- fluidPage(\n  plotOutput(\"plot\", click = \"plot_click\", )\n)\n\nserver <- function(input, output, session) {\n  dist <- reactiveVal(rep(1, nrow(df)))\n  observeEvent(input$plot_click,\n    dist(nearPoints(df, input$plot_click, allRows = TRUE, addDist = TRUE)$dist_)  \n  )\n  \n  output$plot <- renderPlot({\n    df$dist <- dist()\n    ggplot(df, aes(x, y, size = dist)) + \n      geom_point() + \n      scale_size_area(limits = c(0, 1000), max_size = 10, guide = NULL)\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"dbclick-plot_rest","chapter":"7 Graphics","heading":"7.4.1 dbclick plot_rest","text":"","code":"\nlibrary(shiny)\nlibrary(ggplot2)\n\nset.seed(1014)\ndf <- data.frame(x = rnorm(100), y = rnorm(100))\n\nui <- fluidPage(\n  plotOutput(\"plot\", brush = \"plot_brush\", dblclick = \"plot_reset\")\n)\n\nserver <- function(input, output, session) {\n  selected <- reactiveVal(rep(FALSE, nrow(mtcars)))\n\n  observeEvent(input$plot_brush, {\n    brushed <- brushedPoints(mtcars, input$plot_brush, allRows = TRUE)$selected_\n    selected(brushed | selected())\n  })\n  observeEvent(input$plot_reset, {\n    selected(rep(FALSE, nrow(mtcars)))\n  })\n\n  output$plot <- renderPlot({\n    mtcars$sel <- selected()\n    ggplot(mtcars, aes(wt, mpg)) + \n      geom_point(aes(colour = sel)) +\n      scale_colour_discrete(limits = c(\"TRUE\", \"FALSE\"))\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"graphics.html","id":"dynamic-height-and-width","chapter":"7 Graphics","heading":"7.5 Dynamic height and width","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"height\", \"height\", min = 100, max = 500, value = 250),\n  sliderInput(\"width\", \"width\", min = 100, max = 500, value = 250),\n  plotOutput(\"plot\", width = 250, height = 250)\n)\nserver <- function(input, output, session) {\n  output$plot <- renderPlot(\n    width = function() input$width,\n    height = function() input$height,\n    res = 96,\n    {\n      plot(rnorm(20), rnorm(20))\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"user-feedback","chapter":"8 User Feedback","heading":"8 User Feedback","text":"","code":""},{"path":"user-feedback.html","id":"validation","chapter":"8 User Feedback","heading":"8.1 Validation","text":"","code":""},{"path":"user-feedback.html","id":"validating-input","chapter":"8 User Feedback","heading":"8.1.1 Validating input","text":"","code":"\nlibrary(shiny)\nlibrary(shinyFeedback)\n\nui <- fluidPage(\n  shinyFeedback::useShinyFeedback(),\n  numericInput(\"n\", \"n\", value = 10),\n  textOutput(\"half\")\n)\n\nserver <- function(input, output, session) {\n  half <- reactive({\n    even <- input$n %% 2 == 0\n    shinyFeedback::feedbackWarning(\"n\", !even, \"Please select an even number\")\n    input$n / 2    \n  })\n  \n  output$half <- renderText(half())\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"req","chapter":"8 User Feedback","heading":"8.1.2 req","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"language\", \"Language\", choices = c(\"\", \"English\", \"Maori\")),\n  textInput(\"name\", \"Name\"),\n  textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n  greetings <- c(\n    English = \"Hello\", \n    Maori = \"Kia ora\"\n  )\n  output$greeting <- renderText({\n    req(input$language, input$name)\n    paste0(greetings[[input$language]], \" \", input$name, \"!\")\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  shinyFeedback::useShinyFeedback(),\n  textInput(\"dataset\", \"Dataset name\"), \n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    req(input$dataset)\n    \n    exists <- exists(input$dataset, \"package:datasets\")\n    shinyFeedback::feedbackDanger(\"dataset\", !exists, \"Unknown dataset\")\n    req(exists, cancelOutput = TRUE)\n\n    get(input$dataset, \"package:datasets\")\n  })\n  \n  output$data <- renderTable({\n    head(data())\n  })\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"validate-output","chapter":"8 User Feedback","heading":"8.1.3 Validate output","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"x\", \"x\", value = 0),\n  selectInput(\"trans\", \"transformation\", \n    choices = c(\"square\", \"log\", \"square-root\")\n  ),\n  textOutput(\"out\")\n)\n\nserver <- function(input, output, session) {\n  output$out <- renderText({\n    if (input$x < 0 && input$trans %in% c(\"log\", \"square-root\")) {\n      validate(\"x can not be negative for this transformation\")\n    }\n    \n    switch(input$trans,\n      square = input$x ^ 2,\n      \"square-root\" = sqrt(input$x),\n      log = log(input$x)\n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"notifications","chapter":"8 User Feedback","heading":"8.2 Notifications","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"goodnight\", \"Good night\")\n)\nserver <- function(input, output, session) {\n  observeEvent(input$goodnight, {\n    showNotification(\"So long\")\n    Sys.sleep(1)\n    showNotification(\"Farewell\")\n    Sys.sleep(1)\n    showNotification(\"Auf Wiedersehen\")\n    Sys.sleep(1)\n    showNotification(\"Adieu\")\n  })\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"progress-bars","chapter":"8 User Feedback","heading":"8.3 Progress bars","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"steps\", \"How many steps?\", 10),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    withProgress(message = \"Computing random number\", {\n      for (i in seq_len(input$steps)) {\n        Sys.sleep(0.5)\n        incProgress(1 / input$steps)\n      }\n      runif(1)\n    })\n  })\n  \n  output$result <- renderText(round(data(), 2))\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"waiter","chapter":"8 User Feedback","heading":"8.3.1 Waiter","text":"","code":"\nlibrary(shiny)\nlibrary(waiter)\n\nui <- fluidPage(\n  waiter::use_waitress(),\n  numericInput(\"steps\", \"How many steps?\", 10),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    waitress <- waiter::Waitress$new(max = input$steps)\n    on.exit(waitress$close())\n    \n    for (i in seq_len(input$steps)) {\n      Sys.sleep(0.5)\n      waitress$inc(1)\n    }\n    \n    runif(1)\n  })\n  \n  output$result <- renderText(round(data(), 2))\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"spinner","chapter":"8 User Feedback","heading":"8.3.2 Spinner","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  waiter::use_waiter(),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    waiter <- waiter::Waiter$new()\n    waiter$show()\n    on.exit(waiter$hide())\n    \n    Sys.sleep(sample(5, 1))\n    runif(1)\n  })\n  output$result <- renderText(round(data(), 2))\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"spinner-for-specific-output","chapter":"8 User Feedback","heading":"8.3.2.1 Spinner for specific output","text":"","code":"\nui <- fluidPage(\n  waiter::use_waiter(),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\"),\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    waiter::Waiter$new(id = \"plot\")$show()\n    \n    Sys.sleep(3)\n    data.frame(x = runif(50), y = runif(50))\n  })\n  \n  output$plot <- renderPlot(plot(data()), res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"user-feedback.html","id":"shinycssloader","chapter":"8 User Feedback","heading":"8.3.3 shinycssloader","text":"","code":"\nlibrary(shiny)\nlibrary(shinycssloaders)\n\nui <- fluidPage(\n  actionButton(\"go\", \"go\"),\n  withSpinner(plotOutput(\"plot\")),\n)\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    Sys.sleep(3)\n    data.frame(x = runif(50), y = runif(50))\n  })\n  \n  output$plot <- renderPlot(plot(data()), res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"uploads-and-downloads","chapter":"9 Uploads and downloads","heading":"9 Uploads and downloads","text":"","code":""},{"path":"uploads-and-downloads.html","id":"upload","chapter":"9 Uploads and downloads","heading":"9.1 Upload","text":"","code":"\n# to allow up to 100 MB file upload\noptions(shiny.maxRequestSize = 100 * 1024^2) \n\nlibrary(shiny)\n\nui <- fluidPage(\n  fileInput(\"upload\", NULL, buttonLabel = \"Upload...\", multiple = TRUE),\n  tableOutput(\"files\")\n)\n\nserver <- function(input, output, session) {\n  output$files <- renderTable(input$upload)\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"uploading-data","chapter":"9 Uploads and downloads","heading":"9.1.1 Uploading data","text":"","code":"\nlibrary(shiny)\nlibrary(vroom)\n\nui <- fluidPage(\n  fileInput(\"upload\", NULL, accept = c(\".csv\", \".tsv\")),\n  numericInput(\"n\", \"Rows\", value = 5, min = 1, step = 1),\n  tableOutput(\"head\")\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    req(input$upload)\n    \n    ext <- tools::file_ext(input$upload$name)\n    switch(ext,\n      csv = vroom::vroom(input$upload$datapath, delim = \",\"),\n      tsv = vroom::vroom(input$upload$datapath, delim = \"\\t\"),\n      validate(\"Invalid file; Please upload a .csv or .tsv file\")\n    )\n  })\n  \n  output$head <- renderTable({\n    head(data(), input$n)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"download","chapter":"9 Uploads and downloads","heading":"9.2 Download","text":"","code":""},{"path":"uploads-and-downloads.html","id":"download-tsv","chapter":"9 Uploads and downloads","heading":"9.2.1 Download tsv","text":"","code":"\nlibrary(shiny)\nlibrary(vroom)\n\nui <- fluidPage(\n  selectInput(\"dataset\", \"Pick a dataset\", ls(\"package:datasets\")),\n  tableOutput(\"preview\"),\n  downloadButton(\"download\", \"Download .tsv\")\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    out <- get(input$dataset, \"package:datasets\")\n    if (!is.data.frame(out)) {\n      validate(paste0(\"'\", input$dataset, \"' is not a data frame\"))\n    }\n    out\n  })\n  \n  output$preview <- renderTable({\n    head(data())\n  })\n    \n  output$download <- downloadHandler(\n    filename = function() {\n      paste0(input$dataset, \".tsv\")\n    },\n    content = function(file) {\n      vroom::vroom_write(data(), file)\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"download-report","chapter":"9 Uploads and downloads","heading":"9.2.2 Download report","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"Number of points\", 1, 100, 50),\n  downloadButton(\"report\", \"Generate report\")\n)\n\nserver <- function(input, output, session) {\n  output$report <- downloadHandler(\n    filename = \"report.html\",\n    content = function(file) {\n      params <- list(n = input$n)\n      \n      id <- showNotification(\n        \"Rendering report...\", \n        duration = NULL, \n        closeButton = FALSE\n      )\n      on.exit(removeNotification(id), add = TRUE)\n\n      rmarkdown::render(\"report.Rmd\", \n        output_file = file,\n        params = params,\n        envir = new.env(parent = globalenv())\n      )\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"better-version","chapter":"9 Uploads and downloads","heading":"9.2.3 better version","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"Number of points\", 1, 100, 50),\n  downloadButton(\"report\", \"Generate report\")\n)\n\nreport_path <- tempfile(fileext = \".Rmd\")\nfile.copy(\"report.Rmd\", report_path, overwrite = TRUE)\n\nrender_report <- function(input, output, params) {\n  rmarkdown::render(input,\n    output_file = output,\n    params = params,\n    envir = new.env(parent = globalenv())\n  )\n}\n\nserver <- function(input, output) {\n  output$report <- downloadHandler(\n    filename = \"report.html\",\n    content = function(file) {\n      params <- list(n = input$slider)\n      callr::r(\n        render_report,\n        list(input = report_path, output = file, params = params)\n      )\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"case-study-1","chapter":"9 Uploads and downloads","heading":"9.3 Case study","text":"","code":"\nlibrary(shiny)\n\nui_upload <- sidebarLayout(\n  sidebarPanel(\n    fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n    textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n    numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n    numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n  ),\n  mainPanel(\n    h3(\"Raw data\"),\n    tableOutput(\"preview1\")\n  )\n)\n\nui_clean <- sidebarLayout(\n  sidebarPanel(\n    checkboxInput(\"snake\", \"Rename columns to snake case?\"),\n    checkboxInput(\"constant\", \"Remove constant columns?\"),\n    checkboxInput(\"empty\", \"Remove empty cols?\")\n  ),\n  mainPanel(\n    h3(\"Cleaner data\"),\n    tableOutput(\"preview2\")\n  )\n)\n\nui_download <- fluidRow(\n  column(width = 12, downloadButton(\"download\", class = \"btn-block\"))\n)\n\nui <- fluidPage(\n  ui_upload,\n  ui_clean,\n  ui_download\n)\n\nserver <- function(input, output, session) {\n  # Upload ---------------------------------------------------------\n  raw <- reactive({\n    req(input$file)\n    delim <- if (input$delim == \"\") NULL else input$delim\n    vroom::vroom(input$file$datapath, delim = delim, skip = input$skip)\n  })\n  output$preview1 <- renderTable(head(raw(), input$rows))\n  \n  # Clean ----------------------------------------------------------\n  tidied <- reactive({\n    out <- raw()\n    if (input$snake) {\n      names(out) <- janitor::make_clean_names(names(out))\n    }\n    if (input$empty) {\n      out <- janitor::remove_empty(out, \"cols\")\n    }\n    if (input$constant) {\n      out <- janitor::remove_constant(out)\n    }\n    \n    out\n  })\n  output$preview2 <- renderTable(head(tidied(), input$rows))\n  \n  # Download -------------------------------------------------------\n  output$download <- downloadHandler(\n    filename = function() {\n      paste0(tools::file_path_sans_ext(input$file$name), \".tsv\")\n    },\n    content = function(file) {\n      vroom::vroom_write(tidied(), file)\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"exercises-4","chapter":"9 Uploads and downloads","heading":"9.4 Exercises","text":"","code":""},{"path":"uploads-and-downloads.html","id":"ex-1-2","chapter":"9 Uploads and downloads","heading":"9.4.1 Ex 1","text":"","code":"\nlibrary(ambient)\nlibrary(shiny)\n\nui <- fluidPage(\n  downloadButton('d1', 'Download the PNG')\n)\n\nserver <- function(input, output, session) {\n  # Download -------------------------------------------------------\n  output$d1 <- downloadHandler(\n    filename = function() {\n      paste0(\"worley_noise\", \".png\")\n    },\n    content = function(file) {\n      grid <- long_grid(seq(1, 10, length.out = 1000), seq(1, 10, length.out = 1000))\n      grid$noise <- gen_worley(grid$x, grid$y, value = 'distance')\n      png(file)\n      plot(grid, noise)\n      dev.off()\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"ex-2-2","chapter":"9 Uploads and downloads","heading":"9.4.2 Ex 2","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  fileInput('f1', 'Upload a CSV file', accept = '.csv'),\n  selectInput('t1', 'Select a variable to test', choices = NULL),\n  verbatimTextOutput('ttest')\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    vroom::vroom(input$f1$datapath, delim = \",\")\n  })\n    \n  observeEvent(input$f1, {\n    numeric_vars_l <- sapply(data(), is.numeric)\n    numeric_vars <- names(data())[numeric_vars_l]\n    updateSelectInput(inputId = 't1', choices = numeric_vars)\n  })\n  \n  output$ttest <- renderPrint({\n    req(input$t1)\n    t.test(data()[[input$t1]])\n  })\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"ex-3-2","chapter":"9 Uploads and downloads","heading":"9.4.3 Ex 3","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  fileInput('f1', 'Upload a CSV file', accept = '.csv'),\n  selectInput('t1', 'Select a variable to draw a histogram', choices = NULL),\n  plotOutput('h1'),\n  selectInput('t2', 'Download format', choices = c('PNG','PDF','SVG')),\n  downloadButton('d1', 'Download the histogram')\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    vroom::vroom(input$f1$datapath, delim = \",\")\n  })\n    \n  observeEvent(input$f1, {\n    numeric_vars_l <- sapply(data(), is.numeric)\n    numeric_vars <- names(data())[numeric_vars_l]\n    updateSelectInput(inputId = 't1', choices = numeric_vars)\n  })\n  \n  output$h1 <- renderPlot({\n    req(input$t1)\n    hist(data()[[input$t1]])\n  })\n  \n  output$d1 <- downloadHandler(\n    filename = function() {\n      paste0(input$t1, \".\",input$t2)\n    },\n    content = function(file) {\n        \n      output_format <- function(out) {\n        switch (out,\n            PNG = png,\n            PDF = pdf,\n            SVG = svg\n        )\n      }\n      \n      output_format(input$t2)(file)\n      hist(data()[[input$t1]])\n      dev.off()\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"uploads-and-downloads.html","id":"ex-5","chapter":"9 Uploads and downloads","heading":"9.4.4 Ex 5","text":"","code":"\nlibrary(shiny)\n\nui_upload <- sidebarLayout(\n  sidebarPanel(\n    fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n    textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n    numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n    numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n  ),\n  mainPanel(\n    h3(\"Raw data\"),\n    tableOutput(\"preview1\")\n  )\n)\n\nui_clean <- sidebarLayout(\n  sidebarPanel(\n    checkboxInput(\"snake\", \"Rename columns to snake case?\"),\n    checkboxInput(\"constant\", \"Remove constant columns?\"),\n    checkboxInput(\"empty\", \"Remove empty cols?\")\n  ),\n  mainPanel(\n    h3(\"Cleaner data\"),\n    tableOutput(\"preview2\")\n  )\n)\n\nui_download <- fluidRow(\n  column(width = 12, downloadButton(\"download\", class = \"btn-block\"))\n)\n\nui <- fluidPage(\n  ui_upload,\n  ui_clean,\n  ui_download\n)\n\nserver <- function(input, output, session) {\n  # Upload ---------------------------------------------------------\n  raw <- reactive({\n    req(input$file)\n    delim <- if (input$delim == \"\") NULL else input$delim\n    vroom::vroom(input$file$datapath, delim = delim, skip = input$skip)\n  })\n  output$preview1 <- renderTable(head(raw(), input$rows))\n  \n  # Clean ----------------------------------------------------------\n  tidied1 <- reactive({\n    out <- raw()\n    if (input$snake) {\n      names(out) <- janitor::make_clean_names(names(out))\n    }\n    out\n  })\n\n  tidied2 <- reactive({\n    out <- tidied1()\n    if (input$empty) {\n      out <- janitor::remove_empty(out, \"cols\")\n    }\n    out\n  })\n\n  tidied3 <- reactive({\n    out <- tidied2()\n    if (input$constant) {\n      out <- janitor::remove_constant(out)\n    }\n    out\n  })\n  output$preview2 <- renderTable(head(tidied3(), input$rows))\n  \n  # Download -------------------------------------------------------\n  output$download <- downloadHandler(\n    filename = function() {\n      paste0(tools::file_path_sans_ext(input$file$name), \".tsv\")\n    },\n    content = function(file) {\n      vroom::vroom_write(tidied3(), file)\n    }\n  )\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"dynamic-ui","chapter":"10 Dynamic UI","heading":"10 Dynamic UI","text":"3 key techniques creating dynamic user interfaces:Using update family functions modify parameters input controlsUsing update family functions modify parameters input controlsUsing tabsetPanel() conditionally show hide parts user interfaceUsing tabsetPanel() conditionally show hide parts user interfaceUsing uiOutput() renderUI() generate selected parts user interface codeUsing uiOutput() renderUI() generate selected parts user interface code","code":""},{"path":"dynamic-ui.html","id":"updating-inputs","chapter":"10 Dynamic UI","heading":"10.1 Updating inputs","text":"updateXXX() functions: take name input (string) inputId argument.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"min\", \"Minimum\", 0),\n  numericInput(\"max\", \"Maximum\", 3),\n  sliderInput(\"n\", \"n\", min = 0, max = 3, value = 1)\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$min, {\n    updateSliderInput(inputId = \"n\", min = input$min)\n  })  \n  observeEvent(input$max, {\n    updateSliderInput(inputId = \"n\", max = input$max)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"reset-button","chapter":"10 Dynamic UI","heading":"10.1.1 reset button","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x1\", \"x1\", 0, min = -10, max = 10),\n  sliderInput(\"x2\", \"x2\", 0, min = -10, max = 10),\n  sliderInput(\"x3\", \"x3\", 0, min = -10, max = 10),\n  actionButton(\"reset\", \"Reset\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$reset, {\n    updateSliderInput(inputId = \"x1\", value = 0)\n    updateSliderInput(inputId = \"x2\", value = 0)\n    updateSliderInput(inputId = \"x3\", value = 0)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"update-button-label","chapter":"10 Dynamic UI","heading":"10.1.2 update button label","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"n\", \"Simulations\", 10),\n  actionButton(\"simulate\", \"Simulate\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$n, {\n    label <- paste0(\"Simulate \", input$n, \" times\")\n    updateActionButton(inputId = \"simulate\", label = label)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"hierarchical-select-boxes","chapter":"10 Dynamic UI","heading":"10.1.3 hierarchical select boxes","text":"","code":"\nlibrary(vroom)\nlibrary(dplyr)\nlibrary(shiny)\n\nsales <- vroom::vroom(\"assets/sales_data_sample.csv\", col_types = list(), na = \"\")\n\nui <- fluidPage(\n  selectInput(\"territory\", \"Territory\", choices = unique(sales$TERRITORY)),\n  selectInput(\"customername\", \"Customer\", choices = NULL),\n  selectInput(\"ordernumber\", \"Order number\", choices = NULL),\n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  territory <- reactive({\n    filter(sales, TERRITORY == input$territory)\n  })\n  observeEvent(territory(), {\n    choices <- unique(territory()$CUSTOMERNAME)\n    updateSelectInput(inputId = \"customername\", choices = choices) \n  })\n  \n  customer <- reactive({\n    req(input$customername)\n    filter(territory(), CUSTOMERNAME == input$customername)\n  })\n  observeEvent(customer(), {\n    choices <- unique(customer()$ORDERNUMBER)\n    updateSelectInput(inputId = \"ordernumber\", choices = choices)\n  })\n  \n  output$data <- renderTable({\n    req(input$ordernumber)\n    customer() %>% \n      filter(ORDERNUMBER == input$ordernumber) %>% \n      select(QUANTITYORDERED, PRICEEACH, PRODUCTCODE)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"freezereactivevalue","chapter":"10 Dynamic UI","heading":"10.1.4 freezeReactiveValue()","text":"using freezeReactiveValueafter using freezeReactiveValuefreezeReactiveValue ensures reactives outputs use input won’t \nupdated next full round invalidation","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"dataset\", \"Choose a dataset\", c(\"pressure\", \"cars\")),\n  selectInput(\"column\", \"Choose column\", character(0)),\n  verbatimTextOutput(\"summary\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive(get(input$dataset, \"package:datasets\"))\n  \n  observeEvent(input$dataset, {\n    updateSelectInput(inputId = \"column\", choices = names(dataset()))\n  })\n  \n  output$summary <- renderPrint({\n    summary(dataset()[[input$column]])\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"dataset\", \"Choose a dataset\", c(\"pressure\", \"cars\")),\n  selectInput(\"column\", \"Choose column\", character(0)),\n  verbatimTextOutput(\"summary\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive(get(input$dataset, \"package:datasets\"))\n  \n  observeEvent(input$dataset, {\n    freezeReactiveValue(input, \"column\")\n    updateSelectInput(inputId = \"column\", choices = names(dataset()))\n  })\n  \n  output$summary <- renderPrint({\n    summary(dataset()[[input$column]])\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"inter-related-inputs","chapter":"10 Dynamic UI","heading":"10.1.5 inter-related inputs","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"temp_c\", \"Celsius\", NA, step = 1),\n  numericInput(\"temp_f\", \"Fahrenheit\", NA, step = 1)\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$temp_f, {\n    c <- round((input$temp_f - 32) * 5 / 9)\n    updateNumericInput(inputId = \"temp_c\", value = c)\n  })\n  \n  observeEvent(input$temp_c, {\n    f <- round((input$temp_c * 9 / 5) + 32)\n    updateNumericInput(inputId = \"temp_f\", value = f)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"exercises-5","chapter":"10 Dynamic UI","heading":"10.1.6 Exercises","text":"","code":""},{"path":"dynamic-ui.html","id":"ex-1-3","chapter":"10 Dynamic UI","heading":"10.1.6.1 Ex 1","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"year\", \"year\", value = 2020),\n  dateInput(\"date\", \"date\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$year, {\n    updateDateInput(inputId = \"date\", value =paste0(input$year, '-01-01'), min = paste0(input$year,'-01-01'), max = paste0(input$year, '-12-31'))\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-2-3","chapter":"10 Dynamic UI","heading":"10.1.6.2 Ex 2","text":"","code":"\nlibrary(shiny)\nlibrary(openintro)\n\nstates <- unique(county$state)\n\nui <- fluidPage(\n  selectInput(\"state\", \"State\", choices = states),\n  selectInput(\"county\", \"County\", choices = NULL)\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$state, {\n    freezeReactiveValue(input, 'county')\n    county_choices <- unique(county[county$state=='Alabama',][['name']])\n    if (input$state %in% c('Louisiana', 'Alaska')) lbl <- 'Parish' else lbl <- 'County'\n    updateSelectInput(inputId = 'county', label = lbl, choices = county_choices )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-3-3","chapter":"10 Dynamic UI","heading":"10.1.6.3 Ex 3","text":"","code":"\nlibrary(shiny)\nlibrary(gapminder)\n\ncontinents <- unique(gapminder$continent)\n\nui <- fluidPage(\n  selectInput(\"continent\", \"Continent\", choices = continents), \n  selectInput(\"country\", \"Country\", choices = NULL),\n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$continent, {\n    freezeReactiveValue(input, 'country')\n    updateSelectInput(inputId = 'country', choices = unique(gapminder[gapminder$continent==input$continent,'country', drop=TRUE]))\n  })\n  \n  output$data <- renderTable({\n    gapminder[gapminder$country==input$country,]\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-4-1","chapter":"10 Dynamic UI","heading":"10.1.6.4 Ex 4","text":"","code":"\nlibrary(shiny)\nlibrary(gapminder)\n\ncontinents <- as.character(unique(gapminder$continent))\n\nui <- fluidPage(\n  selectInput(\"continent\", \"Continent\", choices = c('All', continents)), \n  selectInput(\"country\", \"Country\", choices = NULL),\n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$continent, {\n    freezeReactiveValue(input, 'country')\n    if (input$continent == 'All') {\n      countries <- unique(gapminder[['country']])\n      countries <- c('All', as.character(countries))\n    } else countries <- unique(gapminder[gapminder$continent==input$continent,'country', drop=TRUE])\n    updateSelectInput(inputId = 'country', choices = countries)\n  })\n  \n  output$data <- renderTable({\n    if (input$country == 'All') {\n      gapminder\n    } else gapminder[gapminder$country==input$country,]\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-5-1","chapter":"10 Dynamic UI","heading":"10.1.6.5 Ex 5","text":"circular references","code":""},{"path":"dynamic-ui.html","id":"dynamic-visibility","chapter":"10 Dynamic UI","heading":"10.2 Dynamic visibility","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"controller\", \"Show\", choices = paste0(\"panel\", 1:3))\n    ),\n    mainPanel(\n      tabsetPanel(\n        id = \"switcher\",\n        type = \"hidden\",\n        tabPanelBody(\"panel1\", \"Panel 1 content\"),\n        tabPanelBody(\"panel2\", \"Panel 2 content\"),\n        tabPanelBody(\"panel3\", \"Panel 3 content\")\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$controller, {\n    updateTabsetPanel(inputId = \"switcher\", selected = input$controller)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"conditional-ui","chapter":"10 Dynamic UI","heading":"10.2.1 Conditional UI","text":"","code":"\nlibrary(shiny)\n\nparameter_tabs <- tabsetPanel(\n  id = \"params\",\n  type = \"hidden\",\n  tabPanel(\"normal\",\n    numericInput(\"mean\", \"mean\", value = 1),\n    numericInput(\"sd\", \"standard deviation\", min = 0, value = 1)\n  ),\n  tabPanel(\"uniform\", \n    numericInput(\"min\", \"min\", value = 0),\n    numericInput(\"max\", \"max\", value = 1)\n  ),\n  tabPanel(\"exponential\",\n    numericInput(\"rate\", \"rate\", value = 1, min = 0),\n  )\n)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"dist\", \"Distribution\", \n        choices = c(\"normal\", \"uniform\", \"exponential\")\n      ),\n      numericInput(\"n\", \"Number of samples\", value = 100),\n      parameter_tabs,\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$dist, {\n    updateTabsetPanel(inputId = \"params\", selected = input$dist)\n  }) \n  \n  sample <- reactive({\n    switch(input$dist,\n      normal = rnorm(input$n, input$mean, input$sd),\n      uniform = runif(input$n, input$min, input$max),\n      exponential = rexp(input$n, input$rate)\n    )\n  })\n  output$hist <- renderPlot(hist(sample()), res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"wizard-interface","chapter":"10 Dynamic UI","heading":"10.2.2 Wizard interface","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  tabsetPanel(\n    id = \"wizard\",\n    type = \"hidden\",\n    tabPanel(\"page_1\", \n      \"Welcome!\",\n      actionButton(\"page_12\", \"next\")\n    ),\n    tabPanel(\"page_2\", \n      \"Only one page to go\",\n      actionButton(\"page_21\", \"prev\"),\n      actionButton(\"page_23\", \"next\")\n    ),\n    tabPanel(\"page_3\", \n      \"You're done!\",\n      actionButton(\"page_32\", \"prev\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  switch_page <- function(i) {\n    updateTabsetPanel(inputId = \"wizard\", selected = paste0(\"page_\", i))\n  }\n  \n  observeEvent(input$page_12, switch_page(2))\n  observeEvent(input$page_21, switch_page(1))\n  observeEvent(input$page_23, switch_page(3))\n  observeEvent(input$page_32, switch_page(2))\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"exercises-6","chapter":"10 Dynamic UI","heading":"10.2.3 Exercises","text":"","code":""},{"path":"dynamic-ui.html","id":"ex-1-4","chapter":"10 Dynamic UI","heading":"10.2.3.1 Ex 1","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  tabsetPanel(\n    tabPanel(\n      'User Selection',\n      selectInput('s1', 'Select one', choices = c('a','b','c')),\n      checkboxInput('c1', 'advanced')\n      # actionButton('b1', 'click me')\n    ),\n    tabPanel(\n      title = 'Tab 2',\n      h1('tab 2')\n    ),\n    id = 'tabs',\n    type = 'hidden'\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$c1, {\n    if (input$c1) updateTabsetPanel(inputId = 'tabs', selected = 'Tab 2')\n  })\n  \n  # observe(print(input$s1))\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-2-4","chapter":"10 Dynamic UI","heading":"10.2.3.2 Ex 2","text":"","code":"\nlibrary(shiny)\nlibrary(ggplot2)\n\nplot_tabs <- tabsetPanel(\n  id = \"plots\",\n  type = \"hidden\",\n  tabPanel(\"histogram\",\n    numericInput(\"hbinw\", \"binwidth\", value = 0.1, min=0, max=1, step = 0.1)\n  ),\n  tabPanel(\"freqpoly\", \n    numericInput(\"fbinw\", \"binwidth\", value = 0.1, min=0, max=1, step = 0.1)\n  ),\n  tabPanel(\"density\",\n    numericInput(\"bw\", \"bw\", value = 0.1, min=0, max=1, step = 0.1)\n  )\n)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"type\", \"Plot Type\", \n        choices = c(\"histogram\", \"freqpoly\", \"density\")\n      ),\n      plot_tabs,\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$type, {\n    updateTabsetPanel(inputId = \"plots\", selected = input$type)\n  }) \n  \n  output$plot <- renderPlot({\n    p <- ggplot(diamonds, aes(carat))\n\n    if (input$type == 'histogram') p + geom_histogram(binwidth = input$hbinw)\n    else if (input$type == 'freqpoly') p + geom_freqpoly(binwidth = input$fbinw)\n    else if (input$type == 'density') p + geom_density(bw = input$bw)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-3-4","chapter":"10 Dynamic UI","heading":"10.2.3.3 Ex 3","text":"","code":"\nlibrary(shiny)\nlibrary(ggplot2)\n\nplot_tabs <- tabsetPanel(\n  id = \"plots\",\n  type = \"hidden\",\n  tabPanel(\"histogram\",\n    numericInput(\"hbinw\", \"binwidth\", value = 0.1, min=0, max=1, step = 0.1)\n  ),\n  tabPanel(\"freqpoly\", \n    numericInput(\"fbinw\", \"binwidth\", value = 0.1, min=0, max=1, step = 0.1)\n  ),\n  tabPanel(\"density\",\n    numericInput(\"bw\", \"bw\", value = 0.1, min=0, max=1, step = 0.1)\n  )\n)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"type\", \"Plot Type\", \n        choices = c(\"histogram\", \"freqpoly\", \"density\")\n      ),\n      plot_tabs,\n      checkboxGroupInput('cb','Show plot(s)', choices = c(\"histogram\", \"freqpoly\", \"density\"))\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$type, {\n    updateTabsetPanel(inputId = \"plots\", selected = input$type)\n  }) \n  \n  output$plot <- renderPlot({\n    p <- ggplot(diamonds, aes(carat))\n\n    if ('histogram' %in% input$cb) p <- p + geom_histogram(binwidth = input$hbinw)\n    if ('freqpoly' %in% input$cb) p <- p + geom_freqpoly(binwidth = input$fbinw)\n    if ('density' %in% input$cb) p <- p + geom_density(bw = input$bw)\n    \n    p\n  })\n\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"creating-ui-with-code","chapter":"10 Dynamic UI","heading":"10.3 Creating UI with code","text":"","code":""},{"path":"dynamic-ui.html","id":"getting-started","chapter":"10 Dynamic UI","heading":"10.3.1 Getting started","text":"renderUI: relying much can create laggy UI","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput(\"label\", \"label\"),\n  selectInput(\"type\", \"type\", c(\"slider\", \"numeric\")),\n  uiOutput(\"numeric\")\n)\nserver <- function(input, output, session) {\n  output$numeric <- renderUI({\n    if (input$type == \"slider\") {\n      sliderInput(\"dynamic\", input$label, value = 0, min = 0, max = 10)\n    } else {\n      numericInput(\"dynamic\", input$label, value = 0, min = 0, max = 10) \n    }\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"multiple-controls","chapter":"10 Dynamic UI","heading":"10.3.2 Multiple controls","text":"use isolate() barplot() example","code":"\nlibrary(shiny)\nlibrary(purrr)\n\nui <- fluidPage(\n  numericInput(\"n\", \"Number of colours\", value = 5, min = 1),\n  uiOutput(\"col\"),\n  textOutput(\"palette\")\n)\n\nserver <- function(input, output, session) {\n  col_names <- reactive(paste0(\"col\", seq_len(input$n)))\n  \n  output$col <- renderUI({\n    map(col_names(), ~ textInput(.x, NULL))\n  })\n  \n  output$palette <- renderText({\n    map_chr(col_names(), ~ input[[.x]] %||% \"\")\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(purrr)\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"n\", \"Number of colours\", value = 5, min = 1),\n      uiOutput(\"col\"),\n    ),\n    mainPanel(\n      plotOutput(\"plot\")  \n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  col_names <- reactive(paste0(\"col\", seq_len(input$n)))\n  \n  output$col <- renderUI({\n    map(col_names(), ~ textInput(.x, NULL, value = isolate(input[[.x]])))\n  })\n  \n  output$plot <- renderPlot({\n    cols <- map_chr(col_names(), ~ input[[.x]] %||% \"\")\n    # convert empty inputs to transparent\n    cols[cols == \"\"] <- NA\n    \n    barplot(\n      rep(1, length(cols)), \n      col = cols,\n      space = 0, \n      axes = FALSE\n    )\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"dynamic-filtering","chapter":"10 Dynamic UI","heading":"10.3.3 Dynamic filtering","text":"columns irisfor dataframes datasets package","code":"\nlibrary(shiny)\n\nmake_ui <- function(x, var) {\n  if (is.numeric(x)) {\n    rng <- range(x, na.rm = TRUE)\n    sliderInput(var, var, min = rng[1], max = rng[2], value = rng)\n  } else if (is.factor(x)) {\n    levs <- levels(x)\n    selectInput(var, var, choices = levs, selected = levs, multiple = TRUE)\n  } else {\n    # Not supported\n    NULL\n  }\n}\n\nfilter_var <- function(x, val) {\n  if (is.numeric(x)) {\n    !is.na(x) & x >= val[1] & x <= val[2]\n  } else if (is.factor(x)) {\n    x %in% val\n  } else {\n    # No control, so don't filter\n    TRUE\n  }\n}\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      make_ui(iris$Sepal.Length, \"Sepal.Length\"),\n      make_ui(iris$Sepal.Width, \"Sepal.Width\"),\n      make_ui(iris$Species, \"Species\")\n    ),\n    mainPanel(\n      tableOutput(\"data\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  selected <- reactive({\n    filter_var(iris$Sepal.Length, input$Sepal.Length) &\n      filter_var(iris$Sepal.Width, input$Sepal.Width) &\n      filter_var(iris$Species, input$Species)\n  })\n  \n  output$data <- renderTable(head(iris[selected(), ], 12))\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(purrr)\n\nmake_ui <- function(x, var) {\n  if (is.numeric(x)) {\n    rng <- range(x, na.rm = TRUE)\n    sliderInput(var, var, min = rng[1], max = rng[2], value = rng)\n  } else if (is.factor(x)) {\n    levs <- levels(x)\n    selectInput(var, var, choices = levs, selected = levs, multiple = TRUE)\n  } else {\n    # Not supported\n    NULL\n  }\n}\n\nfilter_var <- function(x, val) {\n  if (is.numeric(x)) {\n    !is.na(x) & x >= val[1] & x <= val[2]\n  } else if (is.factor(x)) {\n    x %in% val\n  } else {\n    # No control, so don't filter\n    TRUE\n  }\n}\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      map(names(iris), ~ make_ui(iris[[.x]], .x))\n    ),\n    mainPanel(\n      tableOutput(\"data\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  selected <- reactive({\n    each_var <- map(names(iris), ~ filter_var(iris[[.x]], input[[.x]]))\n    reduce(each_var, ~ .x & .y)\n  })\n  \n  output$data <- renderTable(head(iris[selected(), ], 12))\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(purrr)\n\nmake_ui <- function(x, var) {\n  if (is.numeric(x)) {\n    rng <- range(x, na.rm = TRUE)\n    sliderInput(var, var, min = rng[1], max = rng[2], value = rng)\n  } else if (is.factor(x)) {\n    levs <- levels(x)\n    selectInput(var, var, choices = levs, selected = levs, multiple = TRUE)\n  } else {\n    # Not supported\n    NULL\n  }\n}\n\nfilter_var <- function(x, val) {\n  if (is.numeric(x)) {\n    !is.na(x) & x >= val[1] & x <= val[2]\n  } else if (is.factor(x)) {\n    x %in% val\n  } else {\n    # No control, so don't filter\n    TRUE\n  }\n}\n\ndfs <- keep(ls(\"package:datasets\"), ~ is.data.frame(get(.x, \"package:datasets\")))\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"dataset\", label = \"Dataset\", choices = dfs),\n      uiOutput(\"filter\")\n    ),\n    mainPanel(\n      tableOutput(\"data\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  data <- reactive({\n    get(input$dataset, \"package:datasets\")\n  })\n  vars <- reactive(names(data()))\n  \n  output$filter <- renderUI(\n    map(vars(), ~ make_ui(data()[[.x]], .x))\n  )\n  \n  selected <- reactive({\n    each_var <- map(vars(), ~ filter_var(data()[[.x]], input[[.x]]))\n    reduce(each_var, `&`)\n  })\n  \n  output$data <- renderTable(head(data()[selected(), ], 12))\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"exercises-7","chapter":"10 Dynamic UI","heading":"10.3.4 Exercises","text":"","code":""},{"path":"dynamic-ui.html","id":"ex-1-5","chapter":"10 Dynamic UI","heading":"10.3.4.1 Ex 1","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput('type', 'type', c('slider', 'numeric')),\n  tabsetPanel(\n    id = 'uis',\n    type = 'hidden',\n    tabPanel(\n      'slider',\n      sliderInput('n1', 'n', value = 0, min = 0, max = 100)\n    ),\n    tabPanel(\n      'numeric',\n      sliderInput('n2', 'n', value = 0, min = 0, max = 100)\n    ),\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$type, {\n    updateTabsetPanel(inputId = 'uis', selected = input$type)\n  })\n  \n  observeEvent(input$n1, {\n    updateSliderInput(inputId = 'n2', value = input$n1)\n  })\n\n  observeEvent(input$n2, {\n    updateSliderInput(inputId = 'n1', value = input$n2)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"dynamic-ui.html","id":"ex-2-5","chapter":"10 Dynamic UI","heading":"10.3.4.2 Ex 2","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"go\", \"Enter password\"),\n  textOutput(\"text\")\n)\nserver <- function(input, output, session) {\n  observeEvent(input$go, {\n    showModal(modalDialog(\n      passwordInput(\"password\", NULL, value = isolate(input$password)),\n      title = \"Please enter your password\"\n    ))\n  })\n\n  output$text <- renderText({\n    if (!isTruthy(input$password)) {\n      \"No password\"\n    } else {\n      \"Password entered\"\n    }\n  })\n}\n\nshinyApp(ui, server)"},{"path":"why-reactivity.html","id":"why-reactivity","chapter":"11 Why reactivity?","heading":"11 Why reactivity?","text":"","code":""},{"path":"why-reactivity.html","id":"why-do-we-need-reactive-programming","chapter":"11 Why reactivity?","heading":"11.1 Why do we need reactive programming?","text":"Reactive programming style programming focuses values change time, calculations actions depend values.Shiny apps maximally useful, need reactive expressions outputs update inputs change.","code":""},{"path":"why-reactivity.html","id":"event-driven-programming","chapter":"11 Why reactivity?","heading":"11.2 Event-driven programming","text":"","code":"\nDynamicValue <- R6::R6Class(\"DynamicValue\", list(\n  value = NULL,\n  on_update = NULL,\n\n  get = function() self$value,\n\n  set = function(value) {\n    self$value <- value\n    if (!is.null(self$on_update)) \n      self$on_update(value)\n    invisible(self)\n  },\n  \n  onUpdate = function(on_update) {\n    self$on_update <- on_update\n    invisible(self)\n  }\n))\ntemp_c <- DynamicValue$new()\ntemp_c$onUpdate(function(value) {\n  message(\"Converting\") \n  temp_f <<- (value * 9 / 5) + 32\n})\n\ntemp_c$set(10)\n\n# check value of temp_f\ntemp_f # returns 50\n\n# update temp_c\ntemp_c$set(-3)\n\n# check value of temp_f again\ntemp_f # returns 26.6"},{"path":"why-reactivity.html","id":"reactive-programming-1","chapter":"11 Why reactivity?","heading":"11.3 Reactive programming","text":"create reactive expression depends temp_c value:reactive expression two important properties:’s lazy: doesn’t work ’s called.’s cached: doesn’t work second subsequent times ’s called caches previous result.","code":"\nlibrary(shiny)\nreactiveConsole(TRUE)\n\n# create a reactive value\ntemp_c <- reactiveVal(10)\n\n# get its value\ntemp_c() \n\n# set its value\ntemp_c(20)\n\ntemp_c() # check its current value\ntemp_f <- reactive({\n  message(\"Converting\")\n  (temp_c() * 9 / 5) + 32\n})\n\ntemp_f() # get its current value"},{"path":"the-reactive-graph.html","id":"the-reactive-graph","chapter":"12 The reactive graph","heading":"12 The reactive graph","text":"","code":""},{"path":"the-reactive-graph.html","id":"introduction","chapter":"12 The reactive graph","heading":"12.1 Introduction","text":"direction arrow important: expression records used output; output doesn’t record uses expression. subtle distinction, importance become clear learn invalidation.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"a\", \"a\", value = 10),\n  numericInput(\"b\", \"b\", value = 1),\n  numericInput(\"c\", \"c\", value = 1),\n  plotOutput(\"x\"),\n  tableOutput(\"y\"),\n  textOutput(\"z\")\n)\n\nserver <- function(input, output, session) {\n  rng <- reactive(input$a * 2)\n  smp <- reactive(sample(rng(), input$b, replace = TRUE))\n  bc <- reactive(input$b * input$c)\n  \n  output$x <- renderPlot(hist(smp()))\n  output$y <- renderTable(max(smp()))\n  output$z <- renderText(bc())\n}\n\nshinyApp(ui, server)"},{"path":"the-reactive-graph.html","id":"dynamism","chapter":"12 The reactive graph","heading":"12.2 Dynamism","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"choice\", \"A or B?\", c(\"a\", \"b\")),\n  numericInput(\"a\", \"a\", 0),\n  numericInput(\"b\", \"b\", 10),\n  textOutput(\"out\")\n)\n\nserver <- function(input, output, session) {\n  output$out <- renderText({\n    if (input$choice == \"a\") {\n      input$a\n    } else {\n      input$b\n    }\n  }) \n}\n\nshinyApp(ui, server)"},{"path":"reactive-building-blocks.html","id":"reactive-building-blocks","chapter":"13 Reactive building blocks","heading":"13 Reactive building blocks","text":"","code":""},{"path":"reactive-building-blocks.html","id":"introduction-1","chapter":"13 Reactive building blocks","heading":"13.1 Introduction","text":"3 fundamental building blocks reactive programming:reactive valuesreactive expressionsobservers","code":""},{"path":"reactive-building-blocks.html","id":"reactive-values","chapter":"13 Reactive building blocks","heading":"13.2 Reactive values","text":"single reactive value, created reactiveVal()list reactive values, created reactiveValues()","code":""},{"path":"reactive-building-blocks.html","id":"reactive-expressions-1","chapter":"13 Reactive building blocks","heading":"13.3 Reactive expressions","text":"","code":""},{"path":"reactive-building-blocks.html","id":"errors","chapter":"13 Reactive building blocks","heading":"13.3.1 Errors","text":"Reactive expressions cache errors exactly way cache valuesErrors also treated way values comes reactive graph: errors propagate reactive graph exactly way regular values. difference happens error hits output observer:error output displayed appAn error ab observer cause current session terminate. don’t want happen, ’ll need wrap code try() tryCatch()","code":"\nlibrary(shiny)\nreactiveConsole(TRUE)\n\nr <- reactive(stop('Error occured at ', Sys.time(), call. = FALSE))\n\nr()\n\n# wait 2 seconds\nSys.sleep(2)\nr()"},{"path":"reactive-building-blocks.html","id":"observers-and-outputs","chapter":"13 Reactive building blocks","heading":"13.4 Observers and outputs","text":"Observers outputs differ reactive expressions two important ways:eager forgetful - run soon possibly can don’t remember previous action.value returned observer ignored designed work functions called side-effects, like cat() write.csv()","code":""},{"path":"reactive-building-blocks.html","id":"isolating-code","chapter":"13 Reactive building blocks","heading":"13.5 Isolating code","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"x\", \"x\", value = 50, min = 0, max = 100),\n  actionButton(\"capture\", \"capture\"),\n  textOutput(\"out\")\n)\n\nserver <- function(input, output, session) {\n  x <- eventReactive(input$capture, input$x)\n\n  output$out <- renderText({\n    x()\n  })\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"escaping-the-graph","chapter":"14 Escaping the graph","heading":"14 Escaping the graph","text":"","code":""},{"path":"escaping-the-graph.html","id":"introduction-2","chapter":"14 Escaping the graph","heading":"14.1 Introduction","text":"can combine reactiveValues() observe()/observeEvent() connect right hand side reactive graph back left hand side.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput('nm', 'name'),\n  actionButton('clr', 'Clear'),\n  textOutput('hi')\n)\n\nserver <- function(input, output, session) {\n  output$hi <- renderText(paste0('hi ', input$nm))\n\n  observeEvent(input$clr, {\n    updateTextInput(session, 'nm', value='')\n  })\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"case-studies","chapter":"14 Escaping the graph","heading":"14.2 Case studies","text":"","code":""},{"path":"escaping-the-graph.html","id":"one-output-modified-by-multiple-inputs","chapter":"14 Escaping the graph","heading":"14.2.1 One output modified by multiple inputs","text":"reactiveValues()","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"drink\", \"drink me\"),\n  actionButton(\"eat\", \"eat me\"),\n  textOutput(\"notice\")\n)\nserver <- function(input, output, session) {\n  r <- reactiveValues(notice = \"\")\n  observeEvent(input$drink, {\n    r$notice <- \"You are no longer thirsty\"\n  })\n  observeEvent(input$eat, {\n    r$notice <- \"You are no longer hungry\"\n  })\n  output$notice <- renderText(r$notice)\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"up\", \"up\"),\n  actionButton(\"down\", \"down\"),\n  textOutput(\"n\")\n)\nserver <- function(input, output, session) {\n  r <- reactiveValues(n = 0)\n  observeEvent(input$up, {\n    r$n <- r$n + 1\n  })\n  observeEvent(input$down, {\n    r$n <- r$n - 1\n  })\n  \n  output$n <- renderText(r$n)\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"accumulating-inputs","chapter":"14 Escaping the graph","heading":"14.2.2 Accumulating inputs","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput(\"name\", \"name\"),\n  actionButton(\"add\", \"add\"),\n  textOutput(\"names\")\n)\nserver <- function(input, output, session) {\n  r <- reactiveValues(names = character())\n  observeEvent(input$add, {\n    r$names <- c(input$name, r$names)\n    updateTextInput(session, \"name\", value = \"\")\n  })\n  \n  output$names <- renderText(r$names)\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"deleting-inputs","chapter":"14 Escaping the graph","heading":"14.2.3 Deleting inputs","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  textInput(\"name\", \"name\"),\n  actionButton(\"add\", \"add\"),\n  actionButton(\"del\", \"delete\"),\n  textOutput(\"names\")\n)\nserver <- function(input, output, session) {\n  r <- reactiveValues(names = character())\n  observeEvent(input$add, {\n    r$names <- union(r$names, input$name)\n    updateTextInput(session, \"name\", value = \"\")\n  })\n  \n  observeEvent(input$del, {\n    r$names <- setdiff(r$names, input$name)\n    updateTextInput(session, \"name\", value = \"\")\n  })\n  \n  output$names <- renderText(r$names)\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"pausing-animations","chapter":"14 Escaping the graph","heading":"14.2.4 Pausing animations","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"start\", \"start\"),\n  actionButton(\"stop\", \"stop\"),\n  textOutput(\"n\")\n)\nserver <- function(input, output, session) {\n  r <- reactiveValues(running = FALSE, n = 0)\n\n  observeEvent(input$start, {\n    r$running <- TRUE\n  })\n  observeEvent(input$stop, {\n    r$running <- FALSE\n  })\n  \n  observe({\n    if (r$running) {\n      r$n <- isolate(r$n) + 1\n      invalidateLater(250)\n    }\n  })\n  output$n <- renderText(r$n)\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"exercises-8","chapter":"14 Escaping the graph","heading":"14.2.5 Exercises","text":"","code":""},{"path":"escaping-the-graph.html","id":"ex-1-6","chapter":"14 Escaping the graph","heading":"14.2.5.1 Ex 1","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"rnorm\", \"Normal\"),\n  actionButton(\"runif\", \"Uniform\"),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  r <- reactiveValues(fun=\"\")\n\n  observeEvent(input$rnorm, {\n    r$fun <- 'rnorm'\n  })\n  observeEvent(input$runif, {\n    r$fun <- 'runif'\n  })\n\n  observe(print(r$fun))\n  \n  output$plot <- renderPlot({\n    req(r$fun)\n    hist(get(r$fun)(100))\n  })\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"ex-2-6","chapter":"14 Escaping the graph","heading":"14.2.5.2 Ex 2","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"type\", \"type\", c(\"Normal\", \"Uniform\")),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  r <- reactiveValues(fun=\"rnorm\")\n\n  observeEvent(input$go, {\n    if (input$type == 'Normal') r$fun <- 'rnorm'\n    else if (input$type == 'Uniform') r$fun <- 'runif'\n  })\n\n  observe(print(r$fun))\n  \n  output$plot <- renderPlot({\n    req(input$go)\n    hist(get(r$fun)(100))\n  })\n}\n\nshinyApp(ui, server)"},{"path":"escaping-the-graph.html","id":"ex-3-5","chapter":"14 Escaping the graph","heading":"14.2.5.3 Ex 3","text":"","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"type\", \"type\", c(\"Normal\", \"Uniform\")),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  r <- eventReactive(input$go, {\n    if (input$type == 'Normal') 'rnorm'\n    else if (input$type == 'Uniform') 'runif'\n  })\n\n  # observeEvent(input$go, {\n    output$plot <- renderPlot({\n      hist(get(r())(100))\n    })\n  # })\n}\n\nshinyApp(ui, server)"}]

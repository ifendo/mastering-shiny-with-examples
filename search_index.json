[["index.html", "Mastering Shiny with Examples About Mastering-Shiny by Hadley Wickham", " Mastering Shiny with Examples Jie Wang 2022-02-07 About This is the book I used to extract and capture the executable code examples of Mastering Shiny book for my personal practice and testing. Mastering-Shiny by Hadley Wickham Mastering-Shiny "],["your-first-shiny-app.html", "Chapter 1 Your first Shiny app 1.1 Single file app 1.2 Adding UI controls 1.3 Reactive expression 1.4 Exercises", " Chapter 1 Your first Shiny app 1.1 Single file app library(shiny) ui &lt;- fluidPage( h1(&quot;Hello World!&quot;) ) server &lt;- function(input, output, session) { } shinyApp(ui, server) 1.2 Adding UI controls library(shiny) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, label = &quot;Dataset&quot;, choices = ls(&quot;package:datasets&quot;)), verbatimTextOutput(&quot;summary&quot;), tableOutput(&quot;table&quot;) ) server &lt;- function(input, output, session) { output$summary &lt;- renderPrint({ dataset &lt;- get(input$dataset, &quot;package:datasets&quot;) summary(dataset) }) output$table &lt;- renderTable({ dataset &lt;- get(input$dataset, &quot;package:datasets&quot;) dataset }) } shinyApp(ui, server) 1.3 Reactive expression You create a reactive expression by wrapping a block of code in reactive({…}) and assigning it to a variable, and you use a reactive expression by calling it like a function. But while it looks like you’re calling a function, a reactive expression has an important difference: it only runs the first time it is called and then it caches its result until it needs to be updated. library(shiny) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, label = &quot;Dataset&quot;, choices = ls(&quot;package:datasets&quot;)), verbatimTextOutput(&quot;summary&quot;), tableOutput(&quot;table&quot;) ) server &lt;- function(input, output, session) { # Create a reactive expression dataset &lt;- reactive({ get(input$dataset, &quot;package:datasets&quot;) }) output$summary &lt;- renderPrint({ # Use a reactive expression by calling it like a function summary(dataset()) }) output$table &lt;- renderTable({ dataset() }) } shinyApp(ui, server) 1.4 Exercises 1.4.1 Exercise 1 library(shiny) ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText({ paste0(&quot;Hello &quot;, input$name) }) } shinyApp(ui, server) 1.4.2 Exercise 2 library(shiny) ui &lt;- fluidPage( sliderInput(&quot;x&quot;, label = &quot;If x is&quot;, min = 1, max = 50, value = 30), &quot;then x times 5 is&quot;, textOutput(&quot;product&quot;) ) server &lt;- function(input, output, session) { output$product &lt;- renderText({ input$x * 5 }) } shinyApp(ui, server) 1.4.3 Exercise 3 library(shiny) ui &lt;- fluidPage( sliderInput(&quot;x&quot;, label = &quot;If x is&quot;, min = 1, max = 50, value = 30), sliderInput(&quot;y&quot;, label = &quot;and y is&quot;, min = 1, max = 50, value = 5), &quot;then, x times y is&quot;, textOutput(&quot;product&quot;) ) server &lt;- function(input, output, session) { output$product &lt;- renderText({ input$x * input$y }) } shinyApp(ui, server) 1.4.4 Exercise 4 library(shiny) ui &lt;- fluidPage( sliderInput(&quot;x&quot;, &quot;If x is&quot;, min = 1, max = 50, value = 30), sliderInput(&quot;y&quot;, &quot;and y is&quot;, min = 1, max = 50, value = 5), &quot;then, (x * y) is&quot;, textOutput(&quot;product&quot;), &quot;and, (x * y) + 5 is&quot;, textOutput(&quot;product_plus5&quot;), &quot;and (x * y) + 10 is&quot;, textOutput(&quot;product_plus10&quot;) ) server &lt;- function(input, output, session) { product &lt;- reactive({ input$x * input$y }) output$product &lt;- renderText({ product() }) output$product_plus5 &lt;- renderText({ product() + 5 }) output$product_plus10 &lt;- renderText({ product() + 10 }) } shinyApp(ui, server) 1.4.5 Exercise 5 library(shiny) library(ggplot2) datasets &lt;- c(&quot;economics&quot;, &quot;faithfuld&quot;, &quot;seals&quot;) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, &quot;Dataset&quot;, choices = datasets), verbatimTextOutput(&quot;summary&quot;), plotOutput(&quot;plot&quot;) ) server &lt;- function(input, output, session) { dataset &lt;- reactive({ get(input$dataset, &quot;package:ggplot2&quot;) }) output$summary &lt;- renderPrint({ summary(dataset()) }) output$plot &lt;- renderPlot({ plot(dataset()) }, res = 96) } shinyApp(ui, server) "],["basic-ui.html", "Chapter 2 Basic UI 2.1 Shiny extensions 2.2 Inputs 2.3 Outputs", " Chapter 2 Basic UI 2.1 Shiny extensions shinyWidgets colorpicker sorttable https://github.com/nanxstats/awesome-shiny-extensions 2.2 Inputs 2.2.1 Common structure All input functions have the same first argument: inputId. The inputId has two constraints: It must be a simple string that contains only letters, numbers, and underscores (no spaces, dashes, periods, or other special characters allowed!). Name it like you would name a variable in R. It must be unique. If it’s not unique, you’ll have no way to refer to this control in your server function! 2.2.2 Input examples library(shiny) animals &lt;- c(&quot;dog&quot;, &quot;cat&quot;, &quot;mouse&quot;, &quot;bird&quot;, &quot;other&quot;, &quot;I hate animals&quot;) ui &lt;- fluidPage( # free text textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), passwordInput(&quot;password&quot;, &quot;What&#39;s your password?&quot;), textAreaInput(&quot;story&quot;, &quot;Tell me about yourself&quot;, rows = 3), # numeric inputs numericInput(&quot;num&quot;, &quot;Number one&quot;, value = 0, min = 0, max = 100), sliderInput(&quot;num2&quot;, &quot;Number two&quot;, value = 50, min = 0, max = 100), sliderInput(&quot;rng&quot;, &quot;Range&quot;, value = c(10, 20), min = 0, max = 100), # date inputs dateInput(&quot;dob&quot;, &quot;When were you born?&quot;), dateRangeInput(&quot;holiday&quot;, &quot;When do you want to go on vacation next?&quot;), # limited choices selectInput(&quot;state&quot;, &quot;What&#39;s your favourite state?&quot;, state.name), radioButtons(&quot;animal&quot;, &quot;What&#39;s your favourite animal?&quot;, animals), # we can even use Icon radioButtons(&quot;rb&quot;, &quot;Choose one:&quot;, choiceNames = list( icon(&quot;angry&quot;), icon(&quot;smile&quot;), icon(&quot;sad-tear&quot;) ), choiceValues = list(&quot;angry&quot;, &quot;happy&quot;, &quot;sad&quot;) ), # select input selectInput( &quot;state&quot;, &quot;What&#39;s your favourite state?&quot;, state.name, multiple = TRUE ), # file upload fileInput(&quot;upload&quot;, NULL), # action button actionButton(&quot;click&quot;, &quot;Click me!&quot;, class = &quot;btn-danger&quot;), actionButton(&quot;drink&quot;, &quot;Drink me!&quot;, icon = icon(&quot;cocktail&quot;), class = &quot;btn-lg btn-success&quot;) ) server &lt;- function(input, output, session) { } shinyApp(ui, server) 2.2.3 Exercises library(shiny) ui &lt;- fluidPage( # ex 1 textInput(&#39;t1&#39;, label = NULL, placeholder = &#39;Your name&#39;), # ex 2 sliderInput( &#39;s1&#39;, label = &#39;When should we deliver?&#39;, min = as.Date(&#39;2020-09-16&#39;), max = as.Date(&#39;2020-09-23&#39;), value = as.Date(&#39;2020-09-17&#39;) ), # ex 3 sliderInput( &#39;s2&#39;, &#39;Ex 3&#39;, min = 0, max = 100, value = 50, step = 5, animate = TRUE ), # ex 4 selectInput( &#39;se1&#39;, &#39;Select an option&#39;, choices = list( group1 = list(&#39;Option 1&#39;, &#39;Option 2&#39;), group2 = list(&#39;Option 3&#39;, &#39;Option 4&#39;, &#39;Option 5&#39;) ) ) ) server &lt;- function(input, output, session) { } shinyApp(ui, server) 2.3 Outputs Outputs in the UI create placeholders that are later filled by the server function. 2.3.1 Text output library(shiny) ui &lt;- fluidPage( textOutput(&quot;text&quot;), verbatimTextOutput(&quot;code&quot;) ) server &lt;- function(input, output, session) { output$text &lt;- renderText({ &quot;Hello friend!&quot; }) output$code &lt;- renderPrint({ summary(1:10) }) } shinyApp(ui, server) 2.3.2 Table output library(shiny) ui &lt;- fluidPage( tableOutput(&quot;static&quot;), dataTableOutput(&quot;dynamic&quot;) ) server &lt;- function(input, output, session) { output$static &lt;- renderTable(head(mtcars)) output$dynamic &lt;- renderDataTable(mtcars, options = list(pageLength = 5)) } shinyApp(ui, server) 2.3.3 Plot output library(shiny) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, width = &quot;400px&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot(plot(1:5), res = 96) } shinyApp(ui, server) Plots are special because they are outputs that can also act as inputs. plotOutput() has a number of arguments like click, dblclick, and hover. If you pass these a string, like click = “plot_click”, they’ll create a reactive input (input$plot_click) that you can use to handle user interaction on the plot. 2.3.4 Exercises 2.3.4.1 Ex 1 library(shiny) ui &lt;- fluidPage( textOutput(&#39;t1&#39;), verbatimTextOutput(&#39;v1&#39;), verbatimTextOutput(&#39;v2&#39;), verbatimTextOutput(&#39;v3&#39;) ) server &lt;- function(input, output, session) { output$t1 &lt;- renderText(&quot;Good morning!&quot;) output$v1 &lt;- renderPrint(str(lm(mpg ~ wt, data = mtcars))) output$v2 &lt;- renderPrint(summary(mtcars)) output$v3 &lt;- renderPrint(t.test(1:5, 2:6)) } shinyApp(ui, server) 2.3.4.2 Ex 2 library(shiny) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, width = &quot;400px&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot(plot(1:5), width = 700, height = 300, res = 96, alt = &#39;a scatterplot of five random numbers&#39;) } shinyApp(ui, server) 2.3.4.3 Ex 3 library(shiny) ui &lt;- fluidPage( dataTableOutput(&quot;table&quot;) ) server &lt;- function(input, output, session) { output$table &lt;- renderDataTable(mtcars, options = list(dom=&#39;t&#39;)) } shinyApp(ui, server) 2.3.4.4 Ex 4 library(shiny) library(reactable) ui &lt;- fluidPage( reactableOutput(&quot;table&quot;) ) server &lt;- function(input, output) { output$table &lt;- renderReactable({ reactable(mtcars) }) } shinyApp(ui, server) "],["basic-reactivity.html", "Chapter 3 Basic reactivity 3.1 Server function 3.2 Reactive programming 3.3 Reactive Expressions 3.4 Controlling timeing of evaluation 3.5 Observers", " Chapter 3 Basic reactivity The key idea of reactive programming is to specify a graph of dependencies so that when an input changes, all related outputs are automatically updated. 3.1 Server function The ui is simple because every user gets the same HTML. The server is more complicated because every user needs to get an independent version of the app; when user A moves a slider, user B shouldn’t see their outputs change. To achieve this independence, Shiny invokes your server() function each time a new session starts. 3.1.1 Input library(shiny) ui &lt;- fluidPage( numericInput(&quot;count&quot;, label = &quot;Number of values&quot;, value = 100) ) server &lt;- function(input, output, session) { # input objects are read-only input$count &lt;- 10 } shinyApp(ui, server) input is selective about who is allowed to read it. To read from an input, you must be in a reactive context created by a function like renderText() or reactive() 3.1.2 Output library(shiny) ui &lt;- fluidPage( textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText(&quot;Hello human!&quot;) } shinyApp(ui, server) You always use the output object in concert with a render function. The render function does two things: It sets up a special reactive context that automatically tracks what inputs the output uses. It converts the output of your R code into HTML suitable for display on a web page. 3.2 Reactive programming 3.2.1 Reactive programming exercises library(shiny) ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) # server1 # server &lt;- function(input, output, server) { # output$greeting &lt;- renderText(paste0(&quot;Hello &quot;, input$name)) # } # server2 # server &lt;- function(input, output, server) { # greeting &lt;- reactive(paste0(&quot;Hello &quot;, input$name)) # output$greeting &lt;- renderText(greeting()) # } # server3 server &lt;- function(input, output, server) { output$greeting &lt;- renderText(paste0(&quot;Hello &quot;, input$name)) } shinyApp(ui, server) 3.3 Reactive Expressions library(ggplot2) freqpoly &lt;- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) { df &lt;- data.frame( x = c(x1, x2), g = c(rep(&quot;x1&quot;, length(x1)), rep(&quot;x2&quot;, length(x2))) ) ggplot(df, aes(x, colour = g)) + geom_freqpoly(binwidth = binwidth, size = 1) + coord_cartesian(xlim = xlim) } t_test &lt;- function(x1, x2) { test &lt;- t.test(x1, x2) # use sprintf() to format t.test() results compactly sprintf( &quot;p value: %0.3f\\n[%0.2f, %0.2f]&quot;, test$p.value, test$conf.int[1], test$conf.int[2] ) } # compare two simulated datasets with a plot and a hypothesis test set.seed(100) x1 &lt;- rnorm(100, mean = 0, sd = 0.5) x2 &lt;- rnorm(200, mean = 0.15, sd = 0.9) freqpoly(x1, x2) t_test(x1, x2) library(shiny) ui &lt;- fluidPage( fluidRow( column(4, &quot;Distribution 1&quot;, numericInput(&quot;n1&quot;, label = &quot;n&quot;, value = 1000, min = 1), numericInput(&quot;mean1&quot;, label = &quot;µ&quot;, value = 0, step = 0.1), numericInput(&quot;sd1&quot;, label = &quot;σ&quot;, value = 0.5, min = 0.1, step = 0.1) ), column(4, &quot;Distribution 2&quot;, numericInput(&quot;n2&quot;, label = &quot;n&quot;, value = 1000, min = 1), numericInput(&quot;mean2&quot;, label = &quot;µ&quot;, value = 0, step = 0.1), numericInput(&quot;sd2&quot;, label = &quot;σ&quot;, value = 0.5, min = 0.1, step = 0.1) ), column(4, &quot;Frequency polygon&quot;, numericInput(&quot;binwidth&quot;, label = &quot;Bin width&quot;, value = 0.1, step = 0.1), sliderInput(&quot;range&quot;, label = &quot;range&quot;, value = c(-3, 3), min = -5, max = 5) ) ), fluidRow( column(9, plotOutput(&quot;hist&quot;)), column(3, verbatimTextOutput(&quot;ttest&quot;)) ) ) server &lt;- function(input, output, session) { x1 &lt;- reactive(rnorm(input$n1, input$mean1, input$sd1)) x2 &lt;- reactive(rnorm(input$n2, input$mean2, input$sd2)) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range) }, res = 96) output$ttest &lt;- renderText({ t_test(x1(), x2()) }) } shinyApp(ui, server) 3.4 Controlling timeing of evaluation library(shiny) ui &lt;- fluidPage( fluidRow( column(3, numericInput(&quot;lambda1&quot;, label = &quot;lambda1&quot;, value = 3), numericInput(&quot;lambda2&quot;, label = &quot;lambda2&quot;, value = 5), numericInput(&quot;n&quot;, label = &quot;n&quot;, value = 1e4, min = 0) ), column(9, plotOutput(&quot;hist&quot;)) ) ) server &lt;- function(input, output, session) { timer &lt;- reactiveTimer(500) # the plot will update twice a second x1 &lt;- reactive({ timer() rpois(input$n, input$lambda1) }) x2 &lt;- reactive({ timer() rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } shinyApp(ui, server) 3.4.1 eventReactive library(shiny) ui &lt;- fluidPage( fluidRow( column(3, numericInput(&quot;lambda1&quot;, label = &quot;lambda1&quot;, value = 3), numericInput(&quot;lambda2&quot;, label = &quot;lambda2&quot;, value = 5), numericInput(&quot;n&quot;, label = &quot;n&quot;, value = 1e4, min = 0), actionButton(&quot;simulate&quot;, &quot;Simulate!&quot;) ), column(9, plotOutput(&quot;hist&quot;)) ) ) server &lt;- function(input, output, session) { x1 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda1) }) x2 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } shinyApp(ui, server) 3.5 Observers Sometimes you need to reach outside of the app and cause side-effects to happen elsewhere in the world. This might be saving a file to a shared network drive, sending data to a web API, updating a database, or (most commonly) printing a debugging message to the console. These actions don’t affect how your app looks, so you shouldn’t use an output and a render function. Instead you need to use an observer. library(shiny) ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { string &lt;- reactive(paste0(&quot;Hello &quot;, input$name, &quot;!&quot;)) output$greeting &lt;- renderText(string()) observeEvent(input$name, { message(&quot;Greeting performed&quot;) }) } shinyApp(ui, server) "],["case-study-er-injuries.html", "Chapter 4 Case study: ER injuries", " Chapter 4 Case study: ER injuries "],["workflow.html", "Chapter 5 Workflow 5.1 Case Study", " Chapter 5 Workflow Improving workflow is a good place to invest time because it tends to pay great dividends in the long run. 5.1 Case Study 5.1.1 app showing missing values library(readr) library(shiny) sales &lt;- readr::read_csv(&quot;assets/sales_data_sample.csv&quot;) sales &lt;- sales[c( &quot;TERRITORY&quot;, &quot;ORDERDATE&quot;, &quot;ORDERNUMBER&quot;, &quot;PRODUCTCODE&quot;, &quot;QUANTITYORDERED&quot;, &quot;PRICEEACH&quot; )] ui &lt;- fluidPage( selectInput(&quot;territory&quot;, &quot;territory&quot;, choices = unique(sales$TERRITORY)), tableOutput(&quot;selected&quot;) ) server &lt;- function(input, output, session) { selected &lt;- reactive(sales[sales$TERRITORY == input$territory, ]) output$selected &lt;- renderTable(head(selected(), 10)) } shinyApp(ui, server) 5.1.2 app after debugging library(readr) library(shiny) sales &lt;- readr::read_csv(&quot;assets/sales_data_sample.csv&quot;) sales &lt;- sales[c( &quot;TERRITORY&quot;, &quot;ORDERDATE&quot;, &quot;ORDERNUMBER&quot;, &quot;PRODUCTCODE&quot;, &quot;QUANTITYORDERED&quot;, &quot;PRICEEACH&quot; )] ui &lt;- fluidPage( selectInput(&quot;territory&quot;, &quot;territory&quot;, choices = unique(sales$TERRITORY)), tableOutput(&quot;selected&quot;) ) server &lt;- function(input, output, session) { selected &lt;- reactive({ if (input$territory == &quot;NA&quot;) { subset(sales, is.na(TERRITORY)) } else { subset(sales, TERRITORY == input$territory) } }) output$selected &lt;- renderTable(head(selected(), 10)) } shinyApp(ui, server) Shiny had silently converted an NA to an “NA”. GitHub issue 5.1.3 using glue for debugging library(shiny) library(glue) ui &lt;- fluidPage( sliderInput(&quot;x&quot;, &quot;x&quot;, value = 1, min = 0, max = 10), sliderInput(&quot;y&quot;, &quot;y&quot;, value = 2, min = 0, max = 10), sliderInput(&quot;z&quot;, &quot;z&quot;, value = 3, min = 0, max = 10), textOutput(&quot;total&quot;) ) server &lt;- function(input, output, session) { observeEvent(input$x, { message(glue(&quot;Updating y from {input$y} to {input$x * 2}&quot;)) updateSliderInput(session, &quot;y&quot;, value = input$x * 2) }) total &lt;- reactive({ total &lt;- input$x + input$y + input$z message(glue(&quot;New total is {total}&quot;)) total }) output$total &lt;- renderText({ total() }) } shinyApp(ui, server) "],["layout-themes-html.html", "Chapter 6 Layout, themes, HTML 6.1 Single page layouts 6.2 Multi-page layouts 6.3 Bootstrap 6.4 Themes", " Chapter 6 Layout, themes, HTML 6.1 Single page layouts 6.1.1 Exercises 6.1.1.1 Ex 1 using sidebarLayout library(shiny) ui &lt;- fluidPage( sidebarLayout( sidebarPanel(textInput(&#39;t1&#39;,&#39;Please enter your name:&#39;)), mainPanel(textOutput(&#39;to1&#39;)) ) ) server &lt;- function(input, output, session) { } shinyApp(ui, server) using fluidRow library(shiny) ui &lt;- fluidPage( fluidRow( column(4, textInput(&#39;t1&#39;, &#39;Please enter your name:&#39;)), column(8, textOutput(&#39;to1&#39;)) ) ) server &lt;- function(input, output, session) { } shinyApp(ui, server) 6.1.1.2 Ex 2 library(shiny) ui &lt;- fluidPage( titlePanel(&quot;Central limit theorem&quot;), sidebarLayout( sidebarPanel( numericInput(&quot;m&quot;, &quot;Number of samples:&quot;, 2, min = 1, max = 100) ), mainPanel( plotOutput(&quot;hist&quot;) ), position = &#39;right&#39; ) ) server &lt;- function(input, output, session) { output$hist &lt;- renderPlot({ means &lt;- replicate(1e4, mean(runif(input$m))) hist(means, breaks = 20) }, res = 96) } shinyApp(ui, server) 6.1.1.3 Ex 3 library(shiny) ui &lt;- fluidPage( fluidRow( column(6, plotOutput(&#39;p1&#39;)), column(6, plotOutput(&#39;p2&#39;)) ), fluidRow( textInput(&#39;t1&#39;, &#39;Please enter the title:&#39;, width = &#39;100%&#39;) ) ) server &lt;- function(input, output, session) { output$p1 &lt;- renderPlot({ plot(cars) }) output$p2 &lt;- renderPlot({ plot(mtcars) }) } shinyApp(ui, server) 6.2 Multi-page layouts 6.2.1 tabsetPanel library(shiny) ui &lt;- fluidPage( sidebarLayout( sidebarPanel( textOutput(&quot;panel&quot;) ), mainPanel( tabsetPanel( id = &quot;tabset&quot;, tabPanel(&quot;panel 1&quot;, &quot;one&quot;), tabPanel(&quot;panel 2&quot;, &quot;two&quot;), tabPanel(&quot;panel 3&quot;, &quot;three&quot;) ) ) ) ) server &lt;- function(input, output, session) { output$panel &lt;- renderText({ paste(&quot;Current panel: &quot;, input$tabset) }) } shinyApp(ui, server) 6.2.2 navlistPanel library(shiny) ui &lt;- fluidPage( navlistPanel( id = &quot;tabset&quot;, &quot;test Heading 1&quot;, tabPanel(&quot;panel 1&quot;, &quot;Panel one contents&quot;), &quot;test Heading 2&quot;, tabPanel(&quot;panel 2&quot;, &quot;Panel two contents&quot;), tabPanel(&quot;panel 3&quot;, &quot;Panel three contents&quot;) ), textOutput(&#39;t1&#39;) ) server &lt;- function(input, output, session) { output$t1 &lt;- renderText({ paste(&quot;Current panel: &quot;, input$tabset) }) } shinyApp(ui, server) 6.2.3 navbarPage library(shiny) ui &lt;- navbarPage( &quot;Page title&quot;, id = &#39;nav1&#39;, tabPanel(&quot;panel 1&quot;, &quot;one&quot;), tabPanel(&quot;panel 2&quot;, &quot;two&quot;), tabPanel(&quot;panel 3&quot;, &quot;three&quot;), navbarMenu(&quot;subpanels&quot;, tabPanel(&quot;panel 4a&quot;, &quot;four-a&quot;), tabPanel(&quot;panel 4b&quot;, &quot;four-b&quot;), tabPanel(&quot;panel 4c&quot;, &quot;four-c&quot;) ), textOutput(&#39;t1&#39;) ) server &lt;- function(input, output, session) { output$t1 &lt;- renderText({ paste(&quot;Current panel: &quot;, input$nav1) }) } shinyApp(ui, server) 6.3 Bootstrap Some more reference Awesome Shiny 6.4 Themes library(shiny) library(bslib) ui &lt;- fluidPage( theme = bslib::bs_theme(bootswatch = &quot;darkly&quot;), sidebarLayout( sidebarPanel( textInput(&quot;txt&quot;, &quot;Text input:&quot;, &quot;text here&quot;), sliderInput(&quot;slider&quot;, &quot;Slider input:&quot;, 1, 100, 30) ), mainPanel( h1(paste0(&quot;Theme: darkly&quot;)), h2(&quot;Header 2&quot;), p(&quot;Some text&quot;) ) ) ) server &lt;- function(input, output, session) { } shinyApp(ui, server) "],["graphics.html", "Chapter 7 Graphics 7.1 plotOutput click event 7.2 plotOutput click nearPoints 7.3 plotOutput brush brushedPoints 7.4 Modifying the plot 7.5 Dynamic height and width", " Chapter 7 Graphics 7.1 plotOutput click event library(shiny) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;), verbatimTextOutput(&quot;info&quot;) ) server &lt;- function(input, output) { output$plot &lt;- renderPlot({ plot(mtcars$wt, mtcars$mpg) }, res = 96) output$info &lt;- renderPrint({ req(input$plot_click) x &lt;- round(input$plot_click$x, 2) y &lt;- round(input$plot_click$y, 2) cat(&quot;[&quot;, x, &quot;, &quot;, y, &quot;]&quot;, sep = &quot;&quot;) }) } shinyApp(ui, server) 7.2 plotOutput click nearPoints library(shiny) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;), tableOutput(&quot;data&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot({ plot(mtcars$wt, mtcars$mpg) }, res = 96) output$data &lt;- renderTable({ nearPoints(mtcars, input$plot_click, xvar = &quot;wt&quot;, yvar = &quot;mpg&quot;) }) } shinyApp(ui, server) 7.3 plotOutput brush brushedPoints library(shiny) library(ggplot2) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, brush = &quot;plot_brush&quot;), tableOutput(&quot;data&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot({ ggplot(mtcars, aes(wt, mpg)) + geom_point() }, res = 96) output$data &lt;- renderTable({ brushedPoints(mtcars, input$plot_brush) }) } shinyApp(ui, server) 7.4 Modifying the plot library(shiny) library(ggplot2) set.seed(1014) df &lt;- data.frame(x = rnorm(100), y = rnorm(100)) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;, ) ) server &lt;- function(input, output, session) { dist &lt;- reactiveVal(rep(1, nrow(df))) observeEvent(input$plot_click, dist(nearPoints(df, input$plot_click, allRows = TRUE, addDist = TRUE)$dist_) ) output$plot &lt;- renderPlot({ df$dist &lt;- dist() ggplot(df, aes(x, y, size = dist)) + geom_point() + scale_size_area(limits = c(0, 1000), max_size = 10, guide = NULL) }, res = 96) } shinyApp(ui, server) 7.4.1 dbclick plot_rest library(shiny) library(ggplot2) set.seed(1014) df &lt;- data.frame(x = rnorm(100), y = rnorm(100)) ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, brush = &quot;plot_brush&quot;, dblclick = &quot;plot_reset&quot;) ) server &lt;- function(input, output, session) { selected &lt;- reactiveVal(rep(FALSE, nrow(mtcars))) observeEvent(input$plot_brush, { brushed &lt;- brushedPoints(mtcars, input$plot_brush, allRows = TRUE)$selected_ selected(brushed | selected()) }) observeEvent(input$plot_reset, { selected(rep(FALSE, nrow(mtcars))) }) output$plot &lt;- renderPlot({ mtcars$sel &lt;- selected() ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = sel)) + scale_colour_discrete(limits = c(&quot;TRUE&quot;, &quot;FALSE&quot;)) }, res = 96) } shinyApp(ui, server) 7.5 Dynamic height and width library(shiny) ui &lt;- fluidPage( sliderInput(&quot;height&quot;, &quot;height&quot;, min = 100, max = 500, value = 250), sliderInput(&quot;width&quot;, &quot;width&quot;, min = 100, max = 500, value = 250), plotOutput(&quot;plot&quot;, width = 250, height = 250) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot( width = function() input$width, height = function() input$height, res = 96, { plot(rnorm(20), rnorm(20)) } ) } shinyApp(ui, server) "],["user-feedback.html", "Chapter 8 User Feedback 8.1 Validation 8.2 Notifications 8.3 Progress bars", " Chapter 8 User Feedback 8.1 Validation 8.1.1 Validating input library(shiny) library(shinyFeedback) ui &lt;- fluidPage( shinyFeedback::useShinyFeedback(), numericInput(&quot;n&quot;, &quot;n&quot;, value = 10), textOutput(&quot;half&quot;) ) server &lt;- function(input, output, session) { half &lt;- reactive({ even &lt;- input$n %% 2 == 0 shinyFeedback::feedbackWarning(&quot;n&quot;, !even, &quot;Please select an even number&quot;) input$n / 2 }) output$half &lt;- renderText(half()) } shinyApp(ui, server) 8.1.2 req library(shiny) ui &lt;- fluidPage( selectInput(&quot;language&quot;, &quot;Language&quot;, choices = c(&quot;&quot;, &quot;English&quot;, &quot;Maori&quot;)), textInput(&quot;name&quot;, &quot;Name&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { greetings &lt;- c( English = &quot;Hello&quot;, Maori = &quot;Kia ora&quot; ) output$greeting &lt;- renderText({ req(input$language, input$name) paste0(greetings[[input$language]], &quot; &quot;, input$name, &quot;!&quot;) }) } shinyApp(ui, server) library(shiny) ui &lt;- fluidPage( shinyFeedback::useShinyFeedback(), textInput(&quot;dataset&quot;, &quot;Dataset name&quot;), tableOutput(&quot;data&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ req(input$dataset) exists &lt;- exists(input$dataset, &quot;package:datasets&quot;) shinyFeedback::feedbackDanger(&quot;dataset&quot;, !exists, &quot;Unknown dataset&quot;) req(exists, cancelOutput = TRUE) get(input$dataset, &quot;package:datasets&quot;) }) output$data &lt;- renderTable({ head(data()) }) } shinyApp(ui, server) 8.1.3 Validate output library(shiny) ui &lt;- fluidPage( numericInput(&quot;x&quot;, &quot;x&quot;, value = 0), selectInput(&quot;trans&quot;, &quot;transformation&quot;, choices = c(&quot;square&quot;, &quot;log&quot;, &quot;square-root&quot;) ), textOutput(&quot;out&quot;) ) server &lt;- function(input, output, session) { output$out &lt;- renderText({ if (input$x &lt; 0 &amp;&amp; input$trans %in% c(&quot;log&quot;, &quot;square-root&quot;)) { validate(&quot;x can not be negative for this transformation&quot;) } switch(input$trans, square = input$x ^ 2, &quot;square-root&quot; = sqrt(input$x), log = log(input$x) ) }) } shinyApp(ui, server) 8.2 Notifications library(shiny) ui &lt;- fluidPage( actionButton(&quot;goodnight&quot;, &quot;Good night&quot;) ) server &lt;- function(input, output, session) { observeEvent(input$goodnight, { showNotification(&quot;So long&quot;) Sys.sleep(1) showNotification(&quot;Farewell&quot;) Sys.sleep(1) showNotification(&quot;Auf Wiedersehen&quot;) Sys.sleep(1) showNotification(&quot;Adieu&quot;) }) } shinyApp(ui, server) 8.3 Progress bars library(shiny) ui &lt;- fluidPage( numericInput(&quot;steps&quot;, &quot;How many steps?&quot;, 10), actionButton(&quot;go&quot;, &quot;go&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { withProgress(message = &quot;Computing random number&quot;, { for (i in seq_len(input$steps)) { Sys.sleep(0.5) incProgress(1 / input$steps) } runif(1) }) }) output$result &lt;- renderText(round(data(), 2)) } shinyApp(ui, server) 8.3.1 Waiter library(shiny) library(waiter) ui &lt;- fluidPage( waiter::use_waitress(), numericInput(&quot;steps&quot;, &quot;How many steps?&quot;, 10), actionButton(&quot;go&quot;, &quot;go&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { waitress &lt;- waiter::Waitress$new(max = input$steps) on.exit(waitress$close()) for (i in seq_len(input$steps)) { Sys.sleep(0.5) waitress$inc(1) } runif(1) }) output$result &lt;- renderText(round(data(), 2)) } shinyApp(ui, server) 8.3.2 Spinner library(shiny) ui &lt;- fluidPage( waiter::use_waiter(), actionButton(&quot;go&quot;, &quot;go&quot;), textOutput(&quot;result&quot;) ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { waiter &lt;- waiter::Waiter$new() waiter$show() on.exit(waiter$hide()) Sys.sleep(sample(5, 1)) runif(1) }) output$result &lt;- renderText(round(data(), 2)) } shinyApp(ui, server) 8.3.2.1 Spinner for specific output ui &lt;- fluidPage( waiter::use_waiter(), actionButton(&quot;go&quot;, &quot;go&quot;), plotOutput(&quot;plot&quot;), ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { waiter::Waiter$new(id = &quot;plot&quot;)$show() Sys.sleep(3) data.frame(x = runif(50), y = runif(50)) }) output$plot &lt;- renderPlot(plot(data()), res = 96) } shinyApp(ui, server) 8.3.3 shinycssloader library(shiny) library(shinycssloaders) ui &lt;- fluidPage( actionButton(&quot;go&quot;, &quot;go&quot;), withSpinner(plotOutput(&quot;plot&quot;)), ) server &lt;- function(input, output, session) { data &lt;- eventReactive(input$go, { Sys.sleep(3) data.frame(x = runif(50), y = runif(50)) }) output$plot &lt;- renderPlot(plot(data()), res = 96) } shinyApp(ui, server) "],["uploads-and-downloads.html", "Chapter 9 Uploads and downloads 9.1 Upload 9.2 Download 9.3 Case study 9.4 Exercises", " Chapter 9 Uploads and downloads 9.1 Upload options(shiny.maxRequestSize = 100 * 1024^2) # to allow up to 100 MB file upload library(shiny) ui &lt;- fluidPage( fileInput(&quot;upload&quot;, NULL, buttonLabel = &quot;Upload...&quot;, multiple = TRUE), tableOutput(&quot;files&quot;) ) server &lt;- function(input, output, session) { output$files &lt;- renderTable(input$upload) } shinyApp(ui, server) 9.1.1 Uploading data library(shiny) library(vroom) ui &lt;- fluidPage( fileInput(&quot;upload&quot;, NULL, accept = c(&quot;.csv&quot;, &quot;.tsv&quot;)), numericInput(&quot;n&quot;, &quot;Rows&quot;, value = 5, min = 1, step = 1), tableOutput(&quot;head&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ req(input$upload) ext &lt;- tools::file_ext(input$upload$name) switch(ext, csv = vroom::vroom(input$upload$datapath, delim = &quot;,&quot;), tsv = vroom::vroom(input$upload$datapath, delim = &quot;\\t&quot;), validate(&quot;Invalid file; Please upload a .csv or .tsv file&quot;) ) }) output$head &lt;- renderTable({ head(data(), input$n) }) } shinyApp(ui, server) 9.2 Download 9.2.1 Download tsv library(shiny) library(vroom) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, &quot;Pick a dataset&quot;, ls(&quot;package:datasets&quot;)), tableOutput(&quot;preview&quot;), downloadButton(&quot;download&quot;, &quot;Download .tsv&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ out &lt;- get(input$dataset, &quot;package:datasets&quot;) if (!is.data.frame(out)) { validate(paste0(&quot;&#39;&quot;, input$dataset, &quot;&#39; is not a data frame&quot;)) } out }) output$preview &lt;- renderTable({ head(data()) }) output$download &lt;- downloadHandler( filename = function() { paste0(input$dataset, &quot;.tsv&quot;) }, content = function(file) { vroom::vroom_write(data(), file) } ) } shinyApp(ui, server) 9.2.2 Download report library(shiny) ui &lt;- fluidPage( sliderInput(&quot;n&quot;, &quot;Number of points&quot;, 1, 100, 50), downloadButton(&quot;report&quot;, &quot;Generate report&quot;) ) server &lt;- function(input, output, session) { output$report &lt;- downloadHandler( filename = &quot;report.html&quot;, content = function(file) { params &lt;- list(n = input$n) id &lt;- showNotification( &quot;Rendering report...&quot;, duration = NULL, closeButton = FALSE ) on.exit(removeNotification(id), add = TRUE) rmarkdown::render(&quot;report.Rmd&quot;, output_file = file, params = params, envir = new.env(parent = globalenv()) ) } ) } shinyApp(ui, server) 9.2.3 better version library(shiny) ui &lt;- fluidPage( sliderInput(&quot;n&quot;, &quot;Number of points&quot;, 1, 100, 50), downloadButton(&quot;report&quot;, &quot;Generate report&quot;) ) report_path &lt;- tempfile(fileext = &quot;.Rmd&quot;) file.copy(&quot;report.Rmd&quot;, report_path, overwrite = TRUE) render_report &lt;- function(input, output, params) { rmarkdown::render(input, output_file = output, params = params, envir = new.env(parent = globalenv()) ) } server &lt;- function(input, output) { output$report &lt;- downloadHandler( filename = &quot;report.html&quot;, content = function(file) { params &lt;- list(n = input$slider) callr::r( render_report, list(input = report_path, output = file, params = params) ) } ) } shinyApp(ui, server) 9.3 Case study library(shiny) ui_upload &lt;- sidebarLayout( sidebarPanel( fileInput(&quot;file&quot;, &quot;Data&quot;, buttonLabel = &quot;Upload...&quot;), textInput(&quot;delim&quot;, &quot;Delimiter (leave blank to guess)&quot;, &quot;&quot;), numericInput(&quot;skip&quot;, &quot;Rows to skip&quot;, 0, min = 0), numericInput(&quot;rows&quot;, &quot;Rows to preview&quot;, 10, min = 1) ), mainPanel( h3(&quot;Raw data&quot;), tableOutput(&quot;preview1&quot;) ) ) ui_clean &lt;- sidebarLayout( sidebarPanel( checkboxInput(&quot;snake&quot;, &quot;Rename columns to snake case?&quot;), checkboxInput(&quot;constant&quot;, &quot;Remove constant columns?&quot;), checkboxInput(&quot;empty&quot;, &quot;Remove empty cols?&quot;) ), mainPanel( h3(&quot;Cleaner data&quot;), tableOutput(&quot;preview2&quot;) ) ) ui_download &lt;- fluidRow( column(width = 12, downloadButton(&quot;download&quot;, class = &quot;btn-block&quot;)) ) ui &lt;- fluidPage( ui_upload, ui_clean, ui_download ) server &lt;- function(input, output, session) { # Upload --------------------------------------------------------- raw &lt;- reactive({ req(input$file) delim &lt;- if (input$delim == &quot;&quot;) NULL else input$delim vroom::vroom(input$file$datapath, delim = delim, skip = input$skip) }) output$preview1 &lt;- renderTable(head(raw(), input$rows)) # Clean ---------------------------------------------------------- tidied &lt;- reactive({ out &lt;- raw() if (input$snake) { names(out) &lt;- janitor::make_clean_names(names(out)) } if (input$empty) { out &lt;- janitor::remove_empty(out, &quot;cols&quot;) } if (input$constant) { out &lt;- janitor::remove_constant(out) } out }) output$preview2 &lt;- renderTable(head(tidied(), input$rows)) # Download ------------------------------------------------------- output$download &lt;- downloadHandler( filename = function() { paste0(tools::file_path_sans_ext(input$file$name), &quot;.tsv&quot;) }, content = function(file) { vroom::vroom_write(tidied(), file) } ) } shinyApp(ui, server) 9.4 Exercises 9.4.1 Ex 1 library(ambient) library(shiny) ui &lt;- fluidPage( downloadButton(&#39;d1&#39;, &#39;Download the PNG&#39;) ) server &lt;- function(input, output, session) { # Download ------------------------------------------------------- output$d1 &lt;- downloadHandler( filename = function() { paste0(&quot;worley_noise&quot;, &quot;.png&quot;) }, content = function(file) { grid &lt;- long_grid(seq(1, 10, length.out = 1000), seq(1, 10, length.out = 1000)) grid$noise &lt;- gen_worley(grid$x, grid$y, value = &#39;distance&#39;) png(file) plot(grid, noise) dev.off() } ) } shinyApp(ui, server) 9.4.2 Ex 2 library(shiny) ui &lt;- fluidPage( fileInput(&#39;f1&#39;, &#39;Upload a CSV file&#39;, accept = &#39;.csv&#39;), selectInput(&#39;t1&#39;, &#39;Select a variable to test&#39;, choices = NULL), verbatimTextOutput(&#39;ttest&#39;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ vroom::vroom(input$f1$datapath, delim = &quot;,&quot;) }) observeEvent(input$f1, { numeric_vars_l &lt;- sapply(data(), is.numeric) numeric_vars &lt;- names(data())[numeric_vars_l] updateSelectInput(inputId = &#39;t1&#39;, choices = numeric_vars) }) output$ttest &lt;- renderPrint({ req(input$t1) t.test(data()[[input$t1]]) }) } shinyApp(ui, server) 9.4.3 Ex 3 library(shiny) ui &lt;- fluidPage( fileInput(&#39;f1&#39;, &#39;Upload a CSV file&#39;, accept = &#39;.csv&#39;), selectInput(&#39;t1&#39;, &#39;Select a variable to draw a histogram&#39;, choices = NULL), plotOutput(&#39;h1&#39;), selectInput(&#39;t2&#39;, &#39;Download format&#39;, choices = c(&#39;PNG&#39;,&#39;PDF&#39;,&#39;SVG&#39;)), downloadButton(&#39;d1&#39;, &#39;Download the histogram&#39;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ vroom::vroom(input$f1$datapath, delim = &quot;,&quot;) }) observeEvent(input$f1, { numeric_vars_l &lt;- sapply(data(), is.numeric) numeric_vars &lt;- names(data())[numeric_vars_l] updateSelectInput(inputId = &#39;t1&#39;, choices = numeric_vars) }) output$h1 &lt;- renderPlot({ req(input$t1) hist(data()[[input$t1]]) }) output$d1 &lt;- downloadHandler( filename = function() { paste0(input$t1, &quot;.&quot;,input$t2) }, content = function(file) { output_format &lt;- function(out) { switch (out, PNG = png, PDF = pdf, SVG = svg ) } output_format(input$t2)(file) hist(data()[[input$t1]]) dev.off() } ) } shinyApp(ui, server) 9.4.4 Ex 5 library(shiny) ui_upload &lt;- sidebarLayout( sidebarPanel( fileInput(&quot;file&quot;, &quot;Data&quot;, buttonLabel = &quot;Upload...&quot;), textInput(&quot;delim&quot;, &quot;Delimiter (leave blank to guess)&quot;, &quot;&quot;), numericInput(&quot;skip&quot;, &quot;Rows to skip&quot;, 0, min = 0), numericInput(&quot;rows&quot;, &quot;Rows to preview&quot;, 10, min = 1) ), mainPanel( h3(&quot;Raw data&quot;), tableOutput(&quot;preview1&quot;) ) ) ui_clean &lt;- sidebarLayout( sidebarPanel( checkboxInput(&quot;snake&quot;, &quot;Rename columns to snake case?&quot;), checkboxInput(&quot;constant&quot;, &quot;Remove constant columns?&quot;), checkboxInput(&quot;empty&quot;, &quot;Remove empty cols?&quot;) ), mainPanel( h3(&quot;Cleaner data&quot;), tableOutput(&quot;preview2&quot;) ) ) ui_download &lt;- fluidRow( column(width = 12, downloadButton(&quot;download&quot;, class = &quot;btn-block&quot;)) ) ui &lt;- fluidPage( ui_upload, ui_clean, ui_download ) server &lt;- function(input, output, session) { # Upload --------------------------------------------------------- raw &lt;- reactive({ req(input$file) delim &lt;- if (input$delim == &quot;&quot;) NULL else input$delim vroom::vroom(input$file$datapath, delim = delim, skip = input$skip) }) output$preview1 &lt;- renderTable(head(raw(), input$rows)) # Clean ---------------------------------------------------------- tidied1 &lt;- reactive({ out &lt;- raw() if (input$snake) { names(out) &lt;- janitor::make_clean_names(names(out)) } out }) tidied2 &lt;- reactive({ out &lt;- tidied1() if (input$empty) { out &lt;- janitor::remove_empty(out, &quot;cols&quot;) } out }) tidied3 &lt;- reactive({ out &lt;- tidied2() if (input$constant) { out &lt;- janitor::remove_constant(out) } out }) output$preview2 &lt;- renderTable(head(tidied3(), input$rows)) # Download ------------------------------------------------------- output$download &lt;- downloadHandler( filename = function() { paste0(tools::file_path_sans_ext(input$file$name), &quot;.tsv&quot;) }, content = function(file) { vroom::vroom_write(tidied3(), file) } ) } shinyApp(ui, server) "],["dynamic-ui.html", "Chapter 10 Dynamic UI", " Chapter 10 Dynamic UI "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
